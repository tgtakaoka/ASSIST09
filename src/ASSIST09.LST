 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 1 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


       1/       0 :                            TITLE   "ASSIST09 - MC6809 MONITOR"
       2/       0 :                     ;      OPT     ABS,LLE=85,S,CRE
       3/       0 :                     
       4/       0 :                     ;*************************************
       5/       0 :                     ;* COPYRIGHT (C) MOTOROLA, INC. 1979 *
       6/       0 :                     ;*************************************
       7/       0 :                     
       8/       0 :                     ;*************************************
       9/       0 :                     ;*  THIS IS THE BASE ASSIST09 ROM.
      10/       0 :                     ;*  IT MAY RUN WITH OR WITHOUT THE
      11/       0 :                     ;*  EXTENSION ROM WHICH
      12/       0 :                     ;*  WHEN PRESENT WILL BE AUTOMATICALLY
      13/       0 :                     ;*  INCORPORATED BY THE BLDVTR
      14/       0 :                     ;*  SUBROUTINE
      15/       0 :                     ;*************************************
      16/       0 :                     
      17/       0 :                     ;*********************************************
      18/       0 :                     ;*         GLOBAL MODULE EQUATES
      19/       0 :                     ;********************************************
      20/       0 : =$F800               ROMBEG EQU    $F800    ; ROM START ASSEMBLY ADDRESS
      21/       0 : =$FFFFFFFFFFFFE700   RAMOFS EQU    -$1900   ; ROM OFFSET TO RAM WORK PAGE
      22/       0 : =$800                ROMSIZ EQU    2048     ; ROM SIZE
      23/       0 : =$F000               ROM2OF EQU    ROMBEG-ROMSIZ ; START OF EXTENSION ROM
      24/       0 : =$E008               ACIA   EQU    $E008    ; DEFAULT ACIA ADDRESS
      25/       0 : =$E000               PTM    EQU    $E000    ; DEFAULT PTM ADDRESS
      26/       0 : =$0                  DFTCHP EQU    0        ; DEFAULT CHARACTER PAD COUNT
      27/       0 : =$5                  DFTNLP EQU    5        ; DEFAULT NEW LINE PAD COUNT
      28/       0 : ='>'                 PROMPT EQU    '>'      ; PROMPT CHARACTER
      29/       0 : =$8                  NUMBKP EQU    8        ; NUMBER OF BREAKPOINTS
      30/       0 :                     ;*********************************************
      31/       0 :                     
      32/       0 :                     ;*********************************************
      33/       0 :                     ;*   MISCELLANEOUS EQUATES
      34/       0 :                     ;*********************************************
      35/       0 : =$4                  EOT    EQU    $04      ; END OF TRANSMISSION
      36/       0 : =$7                  BELL   EQU    $07      ; BELL CHARACTER
      37/       0 : =$A                  LF     EQU    $0A      ; LINE FEED
      38/       0 : =$D                  CR     EQU    $0D      ; CARRIAGE RETURN
      39/       0 : =$10                 DLE    EQU    $10      ; DATA LINE ESCAPE
      40/       0 : =$18                 CAN    EQU    $18      ; CANCEL (CTRL-X)
      41/       0 :                     ;* PTM ACCESS DEFINITIONS
      42/       0 : =$E001               PTMSTA EQU    PTM+1    ; READ STATUS REGISTER
      43/       0 : =$E000               PTMC13 EQU    PTM      ; CONTROL REGISTER 1 AND 3
      44/       0 : =$E001               PTMC2  EQU    PTM+1    ; CONTROL REGISTER 2
      45/       0 : =$E002               PTMTM1 EQU    PTM+2    ; LATCH 1
      46/       0 : =$E004               PTMTM2 EQU    PTM+4    ; LATCH 2
      47/       0 : =$E006               PTMTM3 EQU    PTM+6    ; LATCH 3
      48/       0 :                     
      49/       0 : =$8C                 SKIP2  EQU    $8C      ; "CMPX #" OPCODE - SKIPS TWO BYTES
      50/       0 :                     
      51/       0 :                     ;*******************************************
      52/       0 :                     ;*    ASSIST09 MONITOR SWI FUNCTIONS
      53/       0 :                     ;* THE FOLLOWING EQUATES DEFINE FUNCTIONS PROVIDED
      54/       0 :                     ;* BY THE ASSIST09 MONITOR VIA THE SWI INSTRUCTION.
      55/       0 :                     ;******************************************
      56/       0 : =$0                  INCHNP EQU    0        ; INPUT CHAR IN A REG - NO PARITY
      57/       0 : =$1                  OUTCH  EQU    1        ; OUTPUT CHAR FROM A REG
      58/       0 : =$2                  PDATA1 EQU    2        ; OUTPUT STRING
      59/       0 : =$3                  PDATA  EQU    3        ; OUTPUT CR/LF THEN STRING
      60/       0 : =$4                  OUT2HS EQU    4        ; OUTPUT TWO HEX AND SPACE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 2 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


      61/       0 : =$5                  OUT4HS EQU    5        ; OUTPUT FOUR HEX AND SPACE
      62/       0 : =$6                  PCRLF  EQU    6        ; OUTPUT CR/LF
      63/       0 : =$7                  SPACE  EQU    7        ; OUTPUT A SPACE
      64/       0 : =$8                  MONITR EQU    8        ; ENTER ASSIST09 MONITOR
      65/       0 : =$9                  VCTRSW EQU    9        ; VECTOR EXAMINE/SWITCH
      66/       0 : =$A                  BRKPT  EQU    10       ; USER PROGRAM BREAKPOINT
      67/       0 : =$B                  PAUSE  EQU    11       ; TASK PAUSE FUNCTION
      68/       0 : =$B                  NUMFUN EQU    11       ; NUMBER OF AVAILABLE FUNCTIONS
      69/       0 :                     ;* NEXT SUB-CODES FOR ACCESSING THE VECTOR TABLE.
      70/       0 :                     ;* THEY ARE EQUIVALENT TO OFFSETS IN THE TABLE.
      71/       0 :                     ;* RELATIVE POSITIONING MUST ME MAINTAINED.
      72/       0 : =$0                  _AVTBL EQU    0        ; ADDRESS OF VECTOR TABLE
      73/       0 : =$2                  _CMDL1 EQU    2        ; FIRST COMMAND LIST
      74/       0 : =$4                  _RSVD  EQU    4        ; RESERVED HARDWARE VECTOR
      75/       0 : =$6                  _SWI3  EQU    6        ; SWI3 ROUTINE
      76/       0 : =$8                  _SWI2  EQU    8        ; SWI2 ROUTINE
      77/       0 : =$A                  _FIRQ  EQU    10       ; FIRQ ROUTINE
      78/       0 : =$C                  _IRQ   EQU    12       ; IRQ ROUTINE
      79/       0 : =$E                  _SWI   EQU    14       ; SWI ROUTINE
      80/       0 : =$10                 _NMI   EQU    16       ; NMI ROUTINE
      81/       0 : =$12                 _RESET EQU    18       ; RESET ROUTINE
      82/       0 : =$14                 _CION  EQU    20       ; CONSOLE ON
      83/       0 : =$16                 _CIDTA EQU    22       ; CONSOLE INPUT DATA
      84/       0 : =$18                 _CIOFF EQU    24       ; CONSOLE INPUT OFF
      85/       0 : =$1A                 _COON  EQU    26       ; CONSOLE OUTPUT ON
      86/       0 : =$1C                 _CODTA EQU    28       ; CONSOLE OUTPUT DATA
      87/       0 : =$1E                 _COOFF EQU    30       ; CONSOLE OUTPUT OFF
      88/       0 : =$20                 _HSDTA EQU    32       ; HIGH SPEED PRINTDATA
      89/       0 : =$22                 _BSON  EQU    34       ; PUNCH/LOAD ON
      90/       0 : =$24                 _BSDAT EQU    36       ; PUNCH/LOAD DATA
      91/       0 : =$26                 _BSOFF EQU    38       ; PUNCH/LOAD OFF
      92/       0 : =$28                 _PAUSE EQU    40       ; TASK PAUSE ROUTINE
      93/       0 : =$2A                 _EXPAN EQU    42       ; EXPRESSION ANALYZER
      94/       0 : =$2C                 _CMDL2 EQU    44       ; SECOND COMMAND LIST
      95/       0 : =$2E                 _ACIA  EQU    46       ; ACIA ADDRESS
      96/       0 : =$30                 _PAD   EQU    48       ; CHARACTER PAD AND NEW LINE PAD
      97/       0 : =$32                 _ECHO  EQU    50       ; ECHO/LOAD AND NULL BKPT FLAG
      98/       0 : =$34                 _PTM   EQU    52       ; PTM ADDRESS
      99/       0 : =$1B                 NUMVTR EQU    52/2+1   ; NUMBER OF VECTORS
     100/       0 : =$34                 HIVTR  EQU    52       ; HIGHEST VECTOR OFFSET
     101/       0 :                     
     102/       0 :                     ;******************************************
     103/       0 :                     ;*              WORK AREA
     104/       0 :                     ;* THIS WORK AREA IS ASSIGNED TO THE PAGE ADDRESSED BY
     105/       0 :                     ;* -$1800,PCR FROM THE BASE ADDRESS OF THE ASSIST09
     106/       0 :                     ;* ROM.  THE DIRECT PAGE REGISTER DURING MOST ROUTINE
     107/       0 :                     ;* OPERATIONS WILL POINT TO THIS WORK AREA.  THE STACK
     108/       0 :                     ;* INITIALLY STARTS UNDER THE RESERVED WORK AREAS AS
     109/       0 :                     ;* DEFINED HEREIN.
     110/       0 :                     ;******************************************
     111/       0 : =$DF00               WORKPG EQU    ROMBEG+RAMOFS ; SETUP DIRECT PAGE ADDRESS
     112/       0 :                            ASSUME DPR:WORKPG>>8 ; NOTIFY ASSEMBLER
     113/    E000 :                            ORG    WORKPG+256 ; READY PAGE DEFINITIONS
     114/    E000 :                     ;* THE FOLLOWING THRU BKPTOP MUST RESIDE IN THIS ORDER
     115/    E000 :                     ;* FOR PROPER INITIALIZATION
     116/    DFFC :                            ORG    *-4
     117/    DFFC : =$DFFC               PAUSER EQU    *        ; PAUSE ROUTINE
     118/    DFFB :                            ORG    *-1
     119/    DFFB : =$DFFB               SWIBFL EQU    *        ; BYPASS SWI AS BREAKPOINT FLAG
     120/    DFFA :                            ORG    *-1
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 3 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     121/    DFFA : =$DFFA               BKPTCT EQU    *        ; BREAKPOINT COUNT
     122/    DFF8 :                            ORG    *-2
     123/    DFF8 : =$DFF8               SLEVEL EQU    *        ; STACK TRACE LEVEL
     124/    DFC2 :                            ORG    *-NUMVTR*2
     125/    DFC2 : =$DFC2               VECTAB EQU    *        ; VECTOR TABLE
     126/    DFB2 :                            ORG    *-2*NUMBKP
     127/    DFB2 : =$DFB2               BKPTBL EQU    *        ; BREAKPOINT TABLE
     128/    DFA2 :                            ORG    *-2*NUMBKP
     129/    DFA2 : =$DFA2               BKPTOP EQU    *        ; BREAKPOINT OPCODE TABLE
     130/    DFA0 :                            ORG    *-2
     131/    DFA0 : =$DFA0               WINDOW EQU    *        ; WINDOW
     132/    DF9E :                            ORG    *-2
     133/    DF9E : =$DF9E               ADDR   EQU    *        ; ADDRESS POINTER VALUE
     134/    DF9D :                            ORG    *-1
     135/    DF9D : =$DF9D               BASEPG EQU    *        ; BASE PAGE VALUE
     136/    DF9B :                            ORG    *-2
     137/    DF9B : =$DF9B               NUMBER EQU    *        ; BINARY BUILD AREA
     138/    DF99 :                            ORG    *-2
     139/    DF99 : =$DF99               LASTOP EQU    *        ; LAST OPCODE TRACED
     140/    DF97 :                            ORG    *-2
     141/    DF97 : =$DF97               RSTACK EQU    *        ; RESET STACK POINTER
     142/    DF95 :                            ORG    *-2
     143/    DF95 : =$DF95               PSTACK EQU    *        ; COMMAND RECOVERY STACK
     144/    DF93 :                            ORG    *-2
     145/    DF93 : =$DF93               PCNTER EQU    *        ; LAST PROGRAM COUNTER
     146/    DF91 :                            ORG    *-2
     147/    DF91 : =$DF91               TRACEC EQU    *        ; TRACE COUNT
     148/    DF90 :                            ORG    *-1
     149/    DF90 : =$DF90               SWICNT EQU    *        ; TRACE "SWI" NEST LEVEL COUNT
     150/    DF8F :                            ORG    *-1      ; (MISFLG MUST FOLLOW SWICNT)
     151/    DF8F : =$DF8F               MISFLG EQU    *        ; LOAD CMD/THRU BREAKPOINT FLAG
     152/    DF8E :                            ORG    *-1
     153/    DF8E : =$DF8E               DELIM  EQU    *        ; EXPRESSION DELIMITER/WORK BYTE
     154/    DF66 :                            ORG    *-40
     155/    DF66 : =$DF66               ROM2WK EQU    *        ; EXTENSION ROM RESERVED AREA
     156/    DF51 :                            ORG    *-21
     157/    DF51 : =$DF51               TSTACK EQU    *        ; TEMPORARY STACK HOLD
     158/    DF51 : =$DF51               STACK  EQU    *        ; START OF INITIAL STACK
     159/    DF51 :                     
     160/    DF51 :                     
     161/    DF51 :                     ;******************************************
     162/    DF51 :                     ;* DEFAULT THE ROM BEGINNING ADDRESS TO 'ROMBEG'
     163/    DF51 :                     ;* ASSIST09 IS POSITION ADDRESS INDEPENDENT HOWEVER
     164/    DF51 :                     ;* WE ASSEMBLE ASSUMING CONTROL OF THE HARDWARE VECTORS.
     165/    DF51 :                     ;* NOTE THAT THE WORK RAM PAGE MUST BE 'RAMOFS'
     166/    DF51 :                     ;* FROM THE ROM BEGINNING ADDRESS.
     167/    DF51 :                     ;********************************************
     168/    F800 :                            ORG    ROMBEG   ; ROM ASSEMBLY/DEFAULT ADDRESS
     169/    F800 :                     
     170/    F800 :                     ;*****************************************************
     171/    F800 :                     ;*            BLDVTR - BUILD ASSIST09 VECTOR TABLE
     172/    F800 :                     ;*  HARDWARE RESET CALLS THIS SUBROUTINE TO BUILD THE
     173/    F800 :                     ;*  ASSIST09 VECTOR TABLE.  THIS SUBROUTINE RESIDES AT
     174/    F800 :                     ;*  THE FIRST BYTE OF THE ASSIST09 ROM, AND CAN BE
     175/    F800 :                     ;*  CALLED VIA EXTERNAL CONTROL CODE FOR REMOTE
     176/    F800 :                     ;*  ASSIST09 EXECUTION.
     177/    F800 :                     ;* INPUT: S->VALID STACK RAM
     178/    F800 :                     ;* OUTPUT: U->VECTOR TABLE ADDRESS
     179/    F800 :                     ;*         DPR->ASSIST09 WORK AREA PAGE
     180/    F800 :                     ;*         THE VECTOR TABLE AND DEFAULTS ARE INITIALIZED
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 4 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     181/    F800 :                     ;*  ALL REGISTERS VOLATILE.
     182/    F800 :                     ;**************************************************
     183/    F800 : 30 8D E7 BE         BLDVTR LEAX   VECTAB,PCR ; ADDRESS VECTOR TABLE
     184/    F804 : 1F 10                      TFR    X,D      ; OBTAIN BASE PAGE ADDRESS
     185/    F806 : 1F 8B                      TFR    A,DP     ; SETUP DPR
     186/    F808 : 97 9D                      STA    BASEPG   ; STORE FOR QUICK REFERENCE
     187/    F80A : 33 84                      LEAU   ,X       ; RETURN TABLE TO CALLER
     188/    F80C : 31 8C 35                   LEAY   <INITVT,PCR ; LOAD FROM ADDR
     189/    F80F : EF 81                      STU    ,X++     ; INIT VECTOR TABLE ADDRESS
     190/    F811 : C6 16                      LDB    #NUMVTR-5 ; NUMBER OF RELOCATABLE VECTORS
     191/    F813 : 34 04                      PSHS   B        ; STORE INDEX ON STACK
     192/    F815 : 1F 20               BLD2   TFR    Y,D      ; PREPARE ADDRESS RESOLVE
     193/    F817 : E3 A1                      ADDD   ,Y++     ; TO ABSOLUTE ADDRESS
     194/    F819 : ED 81                      STD    ,X++     ; INTO VECTOR TABLE
     195/    F81B : 6A E4                      DEC    ,S       ; COUNT DOWN
     196/    F81D : 26 F6                      BNE    BLD2     ; BRANCH IF MORE TO INSERT
     197/    F81F : C6 0D                      LDB    #INTVE-INTVS ; STATIC VALUE INIT LENGTH
     198/    F821 : A6 A0               BLD3   LDA    ,Y+      ; LOAD NEXT BYTE
     199/    F823 : A7 80                      STA    ,X+      ; STORE INTO POSITION
     200/    F825 : 5A                         DECB            ; COUNT DOWN
     201/    F826 : 26 F9                      BNE    BLD3     ; LOOP UNTIL DONE
     202/    F828 : 31 8D F7 D4                LEAY   ROM2OF,PCR ; TEST POSSIBLE EXTENSION ROM
     203/    F82C : 8E 20 FE                   LDX    #$20FE   ; LOAD "BRA *" FLAG PATTERN
     204/    F82F : AC A1                      CMPX   ,Y++     ; ? EXTENDED ROM HERE
     205/    F831 : 26 02                      BNE    BLDRTN   ; BRANCH NOT OUR ROM TO RETURN
     206/    F833 : AD A4                      JSR    ,Y       ; CALL EXTENDED ROM INITIALIZE
     207/    F835 : 35 84               BLDRTN PULS   B,PC     ; RETURN TO INITIALIZER
     208/    F837 :                     
     209/    F837 :                     ;*****************************************************
     210/    F837 :                     ;*                 RESET ENTRY POINT
     211/    F837 :                     ;*  HARDWARE RESET ENTERS HERE IF ASSIST09 IS ENABLED
     212/    F837 :                     ;*  TO RECEIVE THE MC6809 HARDWARE VECTORS.  WE CALL
     213/    F837 :                     ;*  THE BLDVTR SUBROUTINE TO INITIALIZE THE VECTOR
     214/    F837 :                     ;*  TABLE, STACK, AND THE FIREUP THE MONITOR VIA SWI
     215/    F837 :                     ;*  CALL.
     216/    F837 :                     ;*****************************************************
     217/    F837 : 32 8D E7 16         RESET  LEAS   STACK,PCR ; SETUP INITIAL STACK
     218/    F83B : 8D C3                      BSR    BLDVTR   ; BUILD VECTOR TABLE
     219/    F83D : 4F                  RESET2 CLRA            ; ISSUE STARTUP MESSAGE
     220/    F83E : 1F 8B                      TFR    A,DP     ; DEFAULT TO PAGE ZERO
     221/    F840 : 3F                         SWI             ; PERFORM MONITOR FIREUP
     222/    F841 : 08                         FCB    MONITR   ; TO ENTER COMMAND PROCESSION
     223/    F842 : 20 F9                      BRA    RESET2   ; REENTER MONITOR IF 'CONTINUE'
     224/    F844 :                     
     225/    F844 :                     ;******************************************************
     226/    F844 :                     ;*         INITVT - INITIAL VECTOR TABLE
     227/    F844 :                     ;*  THIS TABLE IS RELOCATED TO RAM AND REPRESENTS THE
     228/    F844 :                     ;*  INITIAL STATE OF THE VECTOR TABLE. ALL ADDRESSES
     229/    F844 :                     ;*  ARE CONVERTED TO ABSOLUTE FORM.  THIS TABLE STARTS
     230/    F844 :                     ;*  WITH THE SECOND ENTRY, ENDS WITH STATIC CONSTANT
     231/    F844 :                     ;*  INITIALIZATION DATA WHICH CARRIES BEYOND THE TABLE.
     232/    F844 :                     ;************************************************
     233/    F844 : 01 58               INITVT FDB    CMDTBL-* ; DEFAULT FIRST COMMAND TABLE
     234/    F846 : 02 92                      FDB    RSRVDR-* ; DEFAULT UNDEFINED HARDWARE VECTOR
     235/    F848 : 02 90                      FDB    SWI3R-*  ; DEFAULT SWI3
     236/    F84A : 02 8E                      FDB    SWI2R-*  ; DEFAULT SWI2
     237/    F84C : 02 70                      FDB    FIRQR-*  ; DEFAULT FIRQ
     238/    F84E : 02 8A                      FDB    IRQR-*   ; DEFAULT IRQ ROUTINE
     239/    F850 : 00 45                      FDB    SWIR-*   ; DEFAULT SWI ROUTINE
     240/    F852 : 02 2B                      FDB    NMIR-*   ; DEFAULT NMI ROUTINE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 5 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     241/    F854 : FF E3                      FDB    RESET-*  ; RESTART VECTOR
     242/    F856 : 02 90                      FDB    CION-*   ; DEFAULT CION
     243/    F858 : 02 84                      FDB    CIDAT-*  ; DEFAULT CIDAT
     244/    F85A : 02 96                      FDB    CIOFF-*  ; DEFAULT CIOFF
     245/    F85C : 02 8A                      FDB    COON-*   ; DEFAULT COON
     246/    F85E : 02 93                      FDB    CODAT-*  ; DEFAULT CODAT
     247/    F860 : 02 90                      FDB    COOFF-*  ; DEFAULT COOFF
     248/    F862 : 03 9A                      FDB    HSDTA-*  ; DEFAULT HSDTA
     249/    F864 : 02 B7                      FDB    BSON-*   ; DEFAULT BSON
     250/    F866 : 02 D2                      FDB    BSDAT-*  ; DEFAULT BSDAT
     251/    F868 : 02 BF                      FDB    BSOFF-*  ; DEFAULT BSOFF
     252/    F86A : E7 92                      FDB    PAUSER-* ; DEFAULT PAUSE ROUTINE
     253/    F86C : 04 7D                      FDB    EXP1-*   ; DEFAULT EXPRESSION ANALYZER
     254/    F86E : 01 2D                      FDB    CMDTB2-* ; DEFAULT SECOND COMMAND TABLE
     255/    F870 :                     ;* CONSTANTS
     256/    F870 : E0 08               INTVS  FDB    ACIA     ; DEFAULT ACIA
     257/    F872 : 00 05                      FCB    DFTCHP,DFTNLP ; DEFAULT NULL PADDS
     258/    F874 : 00 00                      FDB    0        ; DEFAULT ECHO
     259/    F876 : E0 00                      FDB    PTM      ; DEFAULT PTM
     260/    F878 : 00 00                      FDB    0        ; INITIAL STACK TRACE LEVEL
     261/    F87A : 00                         FCB    0        ; INITIAL BREAKPOINT COUNT
     262/    F87B : 00                         FCB    0        ; SWI BREAKPOINT LEVEL
     263/    F87C : 39                         FCB    $39      ; DEFAULT PAUSE ROUTINE (RTS)
     264/    F87D : =$F87D               INTVE  EQU    *
     265/    F87D :                     ;*B
     266/    F87D :                     
     267/    F87D :                     ;***********************************************
     268/    F87D :                     ;*             ASSIST09 SWI HANDLER
     269/    F87D :                     ;*  THE SWI HANDLER PROVIDES ALL INTERFACING NECESSARY
     270/    F87D :                     ;*  FOR A USER PROGRAM.  A FUNCTION BYTE IS ASSUMED TO
     271/    F87D :                     ;*  FOLLOW THE SWI INSTRUCTION.  IT IS BOUND CHECKED
     272/    F87D :                     ;*  AND THE PROPER ROUTINE IS GIVEN CONTROL.  THIS
     273/    F87D :                     ;*  INVOCATION MAY ALSO BE A BREAKPOINT INTERRUPT.
     274/    F87D :                     ;*  IF SO, THE BREAKPOINT HANDLER IS ENTERED.
     275/    F87D :                     ;* INPUT: MACHINE STATE DEFINED FOR SWI
     276/    F87D :                     ;* OUTPUT: VARIES ACCORDING TO FUNCTION CALLED. PC ON
     277/    F87D :                     ;*     CALLERS STACK INCREMENTED BY ONE IF VALID CALL.
     278/    F87D :                     ;* VOLATILE REGISTERS: SEE FUNCTION CALLED
     279/    F87D :                     ;* STATE: RUNS DISABLED UNLESS FUNCTION CLEARS I FLAG.
     280/    F87D :                     ;************************************************
     281/    F87D :                     
     282/    F87D :                     ;* SWI FUNCTION VECTOR TABLE
     283/    F87D : 01 94               SWIVTB FDB    ZINCH-SWIVTB ; INCHNP
     284/    F87F : 01 B1                      FDB    ZOTCH1-SWIVTB ; OUTCH
     285/    F881 : 01 CB                      FDB    ZPDAT1-SWIVTB ; PDATA1
     286/    F883 : 01 C3                      FDB    ZPDATA-SWIVTB ; PDATA
     287/    F885 : 01 75                      FDB    ZOT2HS-SWIVTB ; OUT2HS
     288/    F887 : 01 73                      FDB    ZOT4HS-SWIVTB ; OUT4HS
     289/    F889 : 01 C0                      FDB    ZPCRLF-SWIVTB ; PCRLF
     290/    F88B : 01 79                      FDB    ZSPACE-SWIVTB ; SPACE
     291/    F88D : 00 55                      FDB    ZMONTR-SWIVTB ; MONITR
     292/    F88F : 01 7D                      FDB    ZVSWTH-SWIVTB ; VCTRSW
     293/    F891 : 02 56                      FDB    ZBKPNT-SWIVTB ; BREAKPOINT
     294/    F893 : 01 D1                      FDB    ZPAUSE-SWIVTB ; TASK PAUSE
     295/    F895 :                     
     296/    F895 : 6A 8D E6 F7         SWIR   DEC    SWICNT,PCR ; UP "SWI" LEVEL FOR TRACE
     297/    F899 : 17 02 25                   LBSR   LDDP     ; SETUP PAGE AND VERIFY STACK
     298/    F89C :                     ;* CHECK FOR BREAKPOINT TRAP
     299/    F89C : EE 6A                      LDU    10,S     ; LOAD PROGRAM COUNTER
     300/    F89E : 33 5F                      LEAU   -1,U     ; BACK TO SWI ADDRESS
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 6 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     301/    F8A0 : 0D FB                      TST    SWIBFL   ; ? THIS "SWI" BREAKPOINT
     302/    F8A2 : 26 11                      BNE    SWIDNE   ; BRANCH IF SO TO LET THROUGH
     303/    F8A4 : 17 06 9B                   LBSR   CBKLDR   ; OBTAIN BREAKPOINT POINTERS
     304/    F8A7 : 50                         NEGB            ; OBTAIN POSITIVE COUNT
     305/    F8A8 : 5A                  SWILP  DECB            ; COUNTDOWN
     306/    F8A9 : 2B 0A                      BMI    SWIDNE   ; BRANCH WHEN DONE
     307/    F8AB : 11 A3 A1                   CMPU   ,Y++     ; ? WAS THIS A BREAKPOINT
     308/    F8AE : 26 F8                      BNE    SWILP    ; BRANCH IF NOT
     309/    F8B0 : EF 6A                      STU    10,S     ; SET PROGRAM COUNTER BACK
     310/    F8B2 : 16 02 1E                   LBRA   ZBKPNT   ; GO DO BREAKPOINT
     311/    F8B5 : 0F FB               SWIDNE CLR    SWIBFL   ; CLEAR IN CASE SET
     312/    F8B7 : 37 06                      PULU   D        ; OBTAIN FUNCTION BYTE, UP PC
     313/    F8B9 : C1 0B                      CMPB   #NUMFUN  ; ? TOO HIGH
     314/    F8BB : 10 22 02 0F                LBHI   ERROR    ; YES, DO BREAKPOINT
     315/    F8BF : EF 6A                      STU    10,S     ; BUMP PROGRAM COUNTER PAST SWI
     316/    F8C1 : 58                         ASLB            ; FUNCTION CODE TIMES TWO
     317/    F8C2 : 33 8C B8                   LEAU   SWIVTB,PCR ; OBTAIN VECTOR BRANCH ADDRESS
     318/    F8C5 : EC C5                      LDD    B,U      ; LOAD OFFSET
     319/    F8C7 : 6E CB                      JMP    D,U      ; JUMP TO ROUTINE
     320/    F8C9 :                     
     321/    F8C9 :                     ;**********************************************
     322/    F8C9 :                     ;* REGISTERS TO FUNCTION ROUTINES:
     323/    F8C9 :                     ;*  DP-> WORK AREA PAGE
     324/    F8C9 :                     ;*  D,Y,U=UNRELIABLE           X=AS CALLED FROM USER
     325/    F8C9 :                     ;*  S=AS FROM SWI INTERRUPT
     326/    F8C9 :                     ;*********************************************
     327/    F8C9 :                     
     328/    F8C9 :                     ;**************************************************
     329/    F8C9 :                     ;*   [SWI FUNCTION 8]
     330/    F8C9 :                     ;*   MONITOR ENTRY
     331/    F8C9 :                     ;*  FIREUP THE ASSIST09 MONITOR.
     332/    F8C9 :                     ;*  THE STACK WITH ITS VALUES FOR THE DIRECT PAGE
     333/    F8C9 :                     ;*  REGISTER AND CONDITION CODE FLAGS ARE USED AS IS.
     334/    F8C9 :                     ;*   1) INITIALIZE CONSOLE I/O
     335/    F8C9 :                     ;*   2) OPTIONALLY PRINT SIGNON
     336/    F8C9 :                     ;*   3) INITIALIZE PTM FOR SINGLE STEPPING.
     337/    F8C9 :                     ;*   4) ENTER COMMAND PROCESSOR
     338/    F8C9 :                     ;* INPUT: A=0 INIT CONSOLE AND PRINT STARTUP MESSAGE
     339/    F8C9 :                     ;*        A#0 OMIT CONSOLE INIT AND STARTUP MESSAGE
     340/    F8C9 :                     ;*************************************************
     341/    F8C9 :                     
     342/    F8C9 : 41 53 53 49 53 54   SIGNON FCC    'ASSIST09' ; SIGNON EYE-CATCHER
             F8CF : 30 39             
     343/    F8D1 : 04                         FCB    EOT
     344/    F8D2 :                     
     345/    F8D2 : 10 DF 97            ZMONTR STS    RSTACK   ; SAVE FOR BAD STACK RECOVERY
     346/    F8D5 : 6D 61                      TST    1,S      ; ? INIT CONSOLE AND SEND MSG
     347/    F8D7 : 26 0D                      BNE    ZMONT2   ; BRANCH IF NOT
     348/    F8D9 : AD 9D E6 F9                JSR    [VECTAB+_CION,PCR] ; READY CONSOLE INPUT
     349/    F8DD : AD 9D E6 FB                JSR    [VECTAB+_COON,PCR] ; READY CONSOLE OUTPUT
     350/    F8E1 : 30 8C E5                   LEAX   SIGNON,PCR ; READY SIGNON EYE-CATCHER
     351/    F8E4 : 3F                         SWI             ; PERFORM
     352/    F8E5 : 03                         FCB    PDATA    ; PRINT STRING
     353/    F8E6 : 9E F6               ZMONT2 LDX    VECTAB+_PTM ; LOAD PTM ADDRESS
     354/    F8E8 : 27 0D                      BEQ    CMD      ; BRANCH IF NO TO USE A PTM
     355/    F8EA : 6F 02                      CLR    PTMTM1-PTM,X ; SET LATCH TO CLEAR RESET
     356/    F8EC : 6F 03                      CLR    PTMTM1+1-PTM,X ; AND SET GATE HIGH
     357/    F8EE : CC 01 A6                   LDD    #$01A6   ; SETUP TIMER 1 MODE
     358/    F8F1 : A7 01                      STA    PTMC2-PTM,X ; SETUP FOR CONTROL REGISTER 1
     359/    F8F3 : E7 84                      STB    PTMC13-PTM,X ; SET OUTPUT ENABLED/
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 7 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     360/    F8F5 :                     ;*    SINGLE SHOT/ DUAL 8 BIT/INTERNAL MODE/OPERATE
     361/    F8F5 : 6F 01                      CLR    PTMC2-PTM,X ; SET CR2 BACK TO RESET FORM
     362/    F8F7 :                     ;* FALL INTO COMMAND PROCESSOR
     363/    F8F7 :                     
     364/    F8F7 :                     ;***************************************************
     365/    F8F7 :                     ;*          COMMAND HANDLER
     366/    F8F7 :                     ;*  BREAKPOINTS ARE REMOVED AT THIS TIME.
     367/    F8F7 :                     ;*  PROMPT FOR A COMMAND, AND STORE ALL CHARACTERS
     368/    F8F7 :                     ;*  UNTIL A SEPARATOR ON THE STACK.
     369/    F8F7 :                     ;*  SEARCH FOR FIRST MATCHING COMMAND SUBSET,
     370/    F8F7 :                     ;*  CALL IT OR GIVE '?' RESPONSE.
     371/    F8F7 :                     ;*  DURING COMMAND SEARCH:
     372/    F8F7 :                     ;*      B=OFFSET TO NEXT ENTRY ON X
     373/    F8F7 :                     ;*      U=SAVED S
     374/    F8F7 :                     ;*      U-1=ENTRY SIZE+2
     375/    F8F7 :                     ;*      U-2=VALID NUMBER FLAG (>=0 VALID)/COMPARE CNT
     376/    F8F7 :                     ;*      U-3=CARRIAGE RETURN FLAG (0=CR HAS BEEN DONE)
     377/    F8F7 :                     ;*      U-4=START OF COMMAND STORE
     378/    F8F7 :                     ;*      S+0=END OF COMMAND STORE
     379/    F8F7 :                     ;***********************************************
     380/    F8F7 : 3F                  CMD    SWI             ; TO NEW LINE
     381/    F8F8 : 06                         FCB    PCRLF    ; FUNCTION
     382/    F8F9 :                     ;* DISARM THE BREAKPOINTS
     383/    F8F9 : 17 06 46            CMDNEP LBSR   CBKLDR   ; OBTAIN BREAKPOINT POINTERS
     384/    F8FC : 2A 0C                      BPL    CMDNOL   ; BRANCH IF NOT ARMED OR NONE
     385/    F8FE : 50                         NEGB            ; MAKE POSITIVE
     386/    F8FF : D7 FA                      STB    BKPTCT   ; FLAG AS DISARMED
     387/    F901 : 5A                  CMDDDL DECB            ; ? FINISHED
     388/    F902 : 2B 06                      BMI    CMDNOL   ; BRANCH IF FINISHED
     389/    F904 : A6 30                      LDA    -NUMBKP*2,Y ; LOAD OPCODE STORED
     390/    F906 : A7 B1                      STA    [,Y++]   ; STORE BACK OVER "SWI"
     391/    F908 : 20 F7                      BRA    CMDDDL   ; LOOP UNTIL DONE
     392/    F90A : AE 6A               CMDNOL LDX    10,S     ; LOAD USERS PROGRAM COUNTER
     393/    F90C : 9F 93                      STX    PCNTER   ; SAVE FOR EXPRESSION ANALYZER
     394/    F90E : 86 3E                      LDA    #PROMPT  ; LOAD PROMPT CHARACTER
     395/    F910 : 3F                         SWI             ; SEND TO OUTPUT HANDLER
     396/    F911 : 01                         FCB    OUTCH    ; FUNCTION
     397/    F912 : 33 E4                      LEAU   ,S       ; REMEMBER STACK RESTORE ADDRESS
     398/    F914 : DF 95                      STU    PSTACK   ; REMEMBER STACK FOR ERROR USE
     399/    F916 : 4F                         CLRA            ; PREPARE ZERO
     400/    F917 : 5F                         CLRB            ; PREPARE ZERO
     401/    F918 : DD 9B                      STD    NUMBER   ; CLEAR NUMBER BUILD AREA
     402/    F91A : DD 8F                      STD    MISFLG   ; CLEAR MISCELLANEOUS AND SWICNT FLAGS
     403/    F91C : DD 91                      STD    TRACEC   ; CLEAR TRACE COUNT
     404/    F91E : C6 02                      LDB    #2       ; SET D TO TWO
     405/    F920 : 34 07                      PSHS   D,CC     ; PLACE DEFAULT ONTO STACK
     406/    F922 :                     ;* CHECK FOR "QUICK" COMMANDS.
     407/    F922 : 17 04 54                   LBSR   READ     ; OBTAIN FIRST CHARACTER
     408/    F925 : 30 8D 05 81                LEAX   CDOT+2,PCR ; PRESET FOR SINGLE TRACE
     409/    F929 : 81 2E                      CMPA   #'.'     ; QUICK TRACE
     410/    F92B : 27 5A                      BEQ    CMDXQT   ; BRANCH EQUAL FOR TRACE ONE
     411/    F92D : 30 8D 04 E9                LEAX   CMPADP+2,PCR ; READY MEMORY ENTRY POINT
     412/    F931 : 81 2F                      CMPA   #'/'     ; ? OPEN LAST USED MEMORY
     413/    F933 : 27 52                      BEQ    CMDXQT   ; BRANCH TO DO IT IF SO
     414/    F935 :                     ;* PROCESS NEXT CHARACTER
     415/    F935 : 81 20               CMD2   CMPA   #' '     ; ? BLANK OR DELIMITER
     416/    F937 : 23 14                      BLS    CMDGOT   ; BRANCH YES, WE HAVE IT
     417/    F939 : 34 02                      PSHS   A        ; BUILD ONTO STACK
     418/    F93B : 6C 5F                      INC    -1,U     ; COUNT THIS CHARACTER
     419/    F93D : 81 2F                      CMPA   #'/'     ; ? MEMORY COMMAND
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 8 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     420/    F93F : 27 4F                      BEQ    CMDMEM   ; BRANCH IF SO
     421/    F941 : 17 04 0B                   LBSR   BLDHXC   ; TREAT AS HEX VALUE
     422/    F944 : 27 02                      BEQ    CMD3     ; BRANCH IF STILL VALID NUMBER
     423/    F946 : 6A 5E                      DEC    -2,U     ; FLAG AS INVALID NUMBER
     424/    F948 : 17 04 2E            CMD3   LBSR   READ     ; OBTAIN NEXT CHARACTER
     425/    F94B : 20 E8                      BRA    CMD2     ; TEST NEXT CHARACTER
     426/    F94D :                     ;* GOT COMMAND, NOW SEARCH TABLES
     427/    F94D : 80 0D               CMDGOT SUBA   #CR      ; SET ZERO IF CARRIAGE RETURN
     428/    F94F : A7 5D                      STA    -3,U     ; SETUP FLAG
     429/    F951 : 9E C4                      LDX    VECTAB+_CMDL1 ; START WITH FIRST CMD LIST
     430/    F953 : E6 80               CMDSCH LDB    ,X+      ; LOAD ENTRY LENGTH
     431/    F955 : 2A 10                      BPL    CMDSME   ; BRANCH IF NOT LIST END
     432/    F957 : 9E EE                      LDX    VECTAB+_CMDL2 ; NOW TO SECOND CMD LIST
     433/    F959 : 5C                         INCB            ; ? TO CONTINUE TO DEFAULT LIST
     434/    F95A : 27 F7                      BEQ    CMDSCH   ; BRANCH IF SO
     435/    F95C : 10 DE 95            CMDBAD LDS    PSTACK   ; RESTORE STACK
     436/    F95F : 30 8D 01 5A                LEAX   ERRMSG,PCR ; POINT TO ERROR STRING
     437/    F963 : 3F                         SWI             ; SEND OUT
     438/    F964 : 02                         FCB    PDATA1   ; TO CONSOLE
     439/    F965 : 20 90                      BRA    CMD      ; AND TRY AGAIN
     440/    F967 :                     ;* SEARCH NEXT ENTRY
     441/    F967 : 5A                  CMDSME DECB            ; TAKE ACCOUNT OF LENGTH BYTE
     442/    F968 : E1 5F                      CMPB   -1,U     ; ? ENTERED LONGER THAN ENTRY
     443/    F96A : 24 03                      BHS    CMDSIZ   ; BRANCH IF NOT TOO LONG
     444/    F96C : 3A                  CMDFLS ABX             ; SKIP TO NEXT ENTRY
     445/    F96D : 20 E4                      BRA    CMDSCH   ; AND TRY NEXT
     446/    F96F : 31 5D               CMDSIZ LEAY   -3,U     ; PREPARE TO COMPARE
     447/    F971 : A6 5F                      LDA    -1,U     ; LOAD SIZE+2
     448/    F973 : 80 02                      SUBA   #2       ; TO ACTUAL SIZE ENTERED
     449/    F975 : A7 5E                      STA    -2,U     ; SAVE FOR COUNTDOWN
     450/    F977 : 5A                  CMDCMP DECB            ; DOWN ONE BYTE
     451/    F978 : A6 80                      LDA    ,X+      ; NEXT COMMAND CHARACTER
     452/    F97A : A1 A2                      CMPA   ,-Y      ; ? SAME AS THAT ENTERED
     453/    F97C : 26 EE                      BNE    CMDFLS   ; BRANCH TO FLUSH, IF NOT
     454/    F97E : 6A 5E                      DEC    -2,U     ; COUNT DOWN LENGTH OF ENTRY
     455/    F980 : 26 F5                      BNE    CMDCMP   ; BRANCH IF MORE TO TEST
     456/    F982 : 3A                         ABX             ; TO NEXT ENTRY
     457/    F983 : EC 1E                      LDD    -2,X     ; LOAD OFFSET
     458/    F985 : 30 8B                      LEAX   D,X      ; COMPUTE ROUTINE ADDRESS+2
     459/    F987 : 6D 5D               CMDXQT TST    -3,U     ; SET CC FOR CARRIAGE RETURN TEST
     460/    F989 : 32 C4                      LEAS   ,U       ; DELETE STACK WORK AREA
     461/    F98B : AD 1E                      JSR    -2,X     ; CALL COMMAND
     462/    F98D : 16 FF 7A                   LBRA   CMDNOL   ; GO TO NEXT COMMAND
     463/    F990 : 6D 5E               CMDMEM TST    -2,U     ; ? VALID HEX NUMBER ENTERED
     464/    F992 : 2B C8                      BMI    CMDBAD   ; BRANCH ERROR IF NOT
     465/    F994 : 30 88 AE                   LEAX   <CMEMN-CMPADP,X ; TO DIFFERENT ENTRY
     466/    F997 : DC 9B                      LDD    NUMBER   ; LOAD NUMBER ENTERED
     467/    F999 : 20 EC                      BRA    CMDXQT   ; AND ENTER MEMORY COMMAND
     468/    F99B :                     
     469/    F99B :                     ;** COMMANDS ARE ENTERED AS A SUBROUTINE WITH:
     470/    F99B :                     ;**    DPR->ASSIST09 DIRECT PAGE WORK AREA
     471/    F99B :                     ;**    Z=1 CARRIAGE RETURN ENTERED
     472/    F99B :                     ;**    Z=0 NON CARRIAGE RETURN DELIMITER
     473/    F99B :                     ;**    S=NORMAL RETURN ADDRESS
     474/    F99B :                     ;** THE LABEL "CMDBAD" MAY BE ENTERED TO ISSUE AN
     475/    F99B :                     ;** AN ERROR FLAG (*).
     476/    F99B :                     
     477/    F99B :                     ;**************************************************
     478/    F99B :                     ;*        ASSIST09 COMMAND TABLES
     479/    F99B :                     ;*  THESE ARE THE DEFAULT COMMAND TABLES.  EXTERNAL
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 9 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     480/    F99B :                     ;*  TABLES OF THE SAME FORMAT MAY EXTEND/REPLACE
     481/    F99B :                     ;*  THESE BY USING THE VECTOR SWAP FUNCTION.
     482/    F99B :                     ;*
     483/    F99B :                     ;* ENTRY FORMAT:
     484/    F99B :                     ;*     +0...TOTAL SIZE OF ENTRY (INCLUDING THIS BYTE)
     485/    F99B :                     ;*     +1...COMMAND STRING
     486/    F99B :                     ;*     +N...TWO BYTE OFFSET TO COMMAND (ENTRYADDR-*)
     487/    F99B :                     ;*
     488/    F99B :                     ;*  THE TABLE TERMINATE WITH A NONE BYTE -1 OR -2.
     489/    F99B :                     ;*  THE -1 CONTINUES THE COMMAND SEARCH WITH THE
     490/    F99B :                     ;*         SECOND TABLE.
     491/    F99B :                     ;*  THE -2 TERMINATES COMMAND SEARCHES.
     492/    F99B :                     ;****************************************************
     493/    F99B :                     
     494/    F99B :                     ;* THIS IS THE DEFAULT LIST FOR THE SECOND COMMAND
     495/    F99B :                     ;* LIST ENTRY.
     496/    F99B : FE                  CMDTB2 FCB    -2       ; STOP COMMAND SEARCHES
     497/    F99C :                     
     498/    F99C :                     ;* THIS IS THE DEFAULT LIST FOR THE FIRST COMMAND
     499/    F99C :                     ;* LIST ENTRY.
     500/    F99C : =$F99C               CMDTBL EQU    *        ; MONITOR COMMAND TABLE
     501/    F99C : 04                         FCB    4
     502/    F99D : 42                         FCC    'B'      ; 'BREAKPOINT' COMMAND
     503/    F99E : 05 4D                      FDB    CBKPT-*
     504/    F9A0 : 04                         FCB    4
     505/    F9A1 : 43                         FCC    'C'      ; 'CALL' COMMAND
     506/    F9A2 : 04 17                      FDB    CCALL-*
     507/    F9A4 : 04                         FCB    4
     508/    F9A5 : 44                         FCC    'D'      ; 'DISPLAY' COMMAND
     509/    F9A6 : 04 9D                      FDB    CDISP-*
     510/    F9A8 : 04                         FCB    4
     511/    F9A9 : 45                         FCC    'E'      ; 'ENCODE' COMMAND
     512/    F9AA : 05 9F                      FDB    CENCDE-*
     513/    F9AC : 04                         FCB    4
     514/    F9AD : 47                         FCC    'G'      ; 'GO' COMMAND
     515/    F9AE : 03 D2                      FDB    CGO-*
     516/    F9B0 : 04                         FCB    4
     517/    F9B1 : 4C                         FCC    'L'      ; 'LOAD' COMMAND
     518/    F9B2 : 04 DD                      FDB    CLOAD-*
     519/    F9B4 : 04                         FCB    4
     520/    F9B5 : 4D                         FCC    'M'      ; 'MEMORY' COMMAND
     521/    F9B6 : 04 0D                      FDB    CMEM-*
     522/    F9B8 : 04                         FCB    4
     523/    F9B9 : 4E                         FCC    'N'      ; 'NULLS' COMMAND
     524/    F9BA : 04 FD                      FDB    CNULLS-*
     525/    F9BC : 04                         FCB    4
     526/    F9BD : 4F                         FCC    'O'      ; 'OFFSET' COMMAND
     527/    F9BE : 05 0A                      FDB    COFFS-*
     528/    F9C0 : 04                         FCB    4
     529/    F9C1 : 50                         FCC    'P'      ; 'PUNCH' COMMAND
     530/    F9C2 : 04 AF                      FDB    CPUNCH-*
     531/    F9C4 : 04                         FCB    4
     532/    F9C5 : 52                         FCC    'R'      ; 'REGISTERS' COMMAND
     533/    F9C6 : 02 84                      FDB    CREG-*
     534/    F9C8 : 04                         FCB    4
     535/    F9C9 : 53                         FCC    'S'      ; 'STLEVEL' COMMAND
     536/    F9CA : 04 F2                      FDB    CSTLEV-*
     537/    F9CC : 04                         FCB    4
     538/    F9CD : 54                         FCC    'T'      ; 'TRACE' COMMAND
     539/    F9CE : 04 D6                      FDB    CTRACE-*
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 10 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     540/    F9D0 : 04                         FCB    4
     541/    F9D1 : 56                         FCC    'V'      ; 'VERIFY' COMMAND
     542/    F9D2 : 04 CF                      FDB    CVER-*
     543/    F9D4 : 04                         FCB    4
     544/    F9D5 : 57                         FCC    'W'      ; 'WINDOW' COMMAND
     545/    F9D6 : 04 68                      FDB    CWINDO-*
     546/    F9D8 : FF                         FCB    -1       ; END, CONTINUE WITH THE SECOND
     547/    F9D9 :                     
     548/    F9D9 :                     ;*************************************************
     549/    F9D9 :                     ;*             [SWI FUNCTIONS 4 AND 5]
     550/    F9D9 :                     ;*      4 - OUT2HS - DECODE BYTE TO HEX AND ADD SPACE
     551/    F9D9 :                     ;*      5 - OUT4HS - DECODE WORD TO HEX AND ADD SPACE
     552/    F9D9 :                     ;* INPUT: X->BYTE OR WORD TO DECODE
     553/    F9D9 :                     ;* OUTPUT: CHARACTERS SENT TO OUTPUT HANDLER
     554/    F9D9 :                     ;*         X->NEXT BYTE OR WORD
     555/    F9D9 :                     ;**************************************************
     556/    F9D9 :                     
     557/    F9D9 : A6 80               ZOUT2H LDA    ,X+      ; LOAD NEXT BYTE
     558/    F9DB : 34 06                      PSHS   D        ; SAVE - DO NOT REREAD
     559/    F9DD : C6 10                      LDB    #16      ; SHIFT BY 4 BITS
     560/    F9DF : 3D                         MUL             ; WITH MULTIPLY
     561/    F9E0 : 8D 04                      BSR    ZOUTHX   ; SEND OUT AS HEX
     562/    F9E2 : 35 06                      PULS   D        ; RESTORE BYTES
     563/    F9E4 : 84 0F                      ANDA   #$0F     ; ISOLATE RIGHT HEX
     564/    F9E6 : 8B 90               ZOUTHX ADDA   #$90     ; PREPARE A-F ADJUST
     565/    F9E8 : 19                         DAA             ; ADJUST
     566/    F9E9 : 89 40                      ADCA   #$40     ; PREPARE CHARACTER BITS
     567/    F9EB : 19                         DAA             ; ADJUST
     568/    F9EC : 6E 9D E5 EE         SEND   JMP    [VECTAB+_CODTA,PCR] ; SEND TO OUT HANDLER
     569/    F9F0 :                     
     570/    F9F0 : 8D E7               ZOT4HS BSR    ZOUT2H   ; CONVERT FIRST BYTE
     571/    F9F2 : 8D E5               ZOT2HS BSR    ZOUT2H   ; CONVERT BYTE TO HEX
     572/    F9F4 : AF 64                      STX    4,S      ; UPDATE USERS X REGISTER
     573/    F9F6 :                     ;* FALL INTO SPACE ROUTINE
     574/    F9F6 :                     
     575/    F9F6 :                     ;*************************************************
     576/    F9F6 :                     ;*            [SWI FUNCTION 7]
     577/    F9F6 :                     ;*         SPACE - SEND BLANK TO OUTPUT HANDLER
     578/    F9F6 :                     ;* INPUT: NONE
     579/    F9F6 :                     ;* OUTPUT: BLANK SEND TO CONSOLE HANDLER
     580/    F9F6 :                     ;*************************************************
     581/    F9F6 : 86 20               ZSPACE LDA    #' '     ; LOAD BLANK
     582/    F9F8 : 20 3D                      BRA    ZOTCH2   ; SEND AND RETURN
     583/    F9FA :                     
     584/    F9FA :                     ;***************************************************
     585/    F9FA :                     ;*              [SWI FUNCTION 9]
     586/    F9FA :                     ;*          SWAP VECTOR TABLE ENTRY
     587/    F9FA :                     ;* INPUT: A=VECTOR TABLE CODE (OFFSET)
     588/    F9FA :                     ;*        X=0 OR REPLACEMENT VALUE
     589/    F9FA :                     ;* OUTPUT: X=PREVIOUS VALUE
     590/    F9FA :                     ;***************************************************
     591/    F9FA : A6 61               ZVSWTH LDA    1,S      ; LOAD REQUESTERS A
     592/    F9FC : 81 34                      CMPA   #HIVTR   ; ? SUB-CODE TOO HIGH
     593/    F9FE : 22 39                      BHI    ZOTCH3   ; IGNORE CALL IF SO
     594/    FA00 : 10 9E C2                   LDY    VECTAB+_AVTBL ; LOAD VECTOR TABLE ADDRESS
     595/    FA03 : EE A6                      LDU    A,Y      ; U=OLD ENTRY
     596/    FA05 : EF 64                      STU    4,S      ; RETURN OLD VALUE TO CALLERS X
     597/    FA07 : AF 7E                      STX    -2,S     ; ? X=0
     598/    FA09 : 27 2E                      BEQ    ZOTCH3   ; YES, DO NOT CHANGE ENTRY
     599/    FA0B : AF A6                      STX    A,Y      ; REPLACE ENTRY
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 11 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     600/    FA0D : 20 2A                      BRA    ZOTCH3   ; RETURN FROM SWI
     601/    FA0F :                     ;*D
     602/    FA0F :                     
     603/    FA0F :                     ;************************************************
     604/    FA0F :                     ;*                    [SWI FUNCTION 0]
     605/    FA0F :                     ;*   INCHNP - OBTAIN INPUT CHAR IN A (NO PARITY)
     606/    FA0F :                     ;*  NULLS AND RUBOUTS ARE IGNORED.
     607/    FA0F :                     ;*  AUTOMATIC LINE FEED IS SENT UPON RECEIVING A
     608/    FA0F :                     ;*      CARRIAGE RETURN.
     609/    FA0F :                     ;*  UNLESS WE ARE LOADING FROM TAPE.
     610/    FA0F :                     ;************************************************
     611/    FA0F : 8D 5D               ZINCHP BSR    XQPAUS   ; RELEASE PROCESSOR
     612/    FA11 : 8D 5F               ZINCH  BSR    XQCIDT   ; CALL INPUT DATA APPENDAGE
     613/    FA13 : 24 FA                      BCC    ZINCHP   ; LOOP IF NONE AVAILABLE
     614/    FA15 : 4D                         TSTA
     615/    FA16 : 27 F9                      BEQ    ZINCH    ; IGNORE NULL
     616/    FA18 : 81 7F                      CMPA   #$7F     ; ? RUBOUT
     617/    FA1A : 27 F5                      BEQ    ZINCH
     618/    FA1C : A7 61                      STA    1,S      ; STORE INTO CALLERS A
     619/    FA1E : 0D 8F                      TST    MISFLG   ; ? LOAD IN PROGRESS
     620/    FA20 : 26 17                      BNE    ZOTCH3   ; BRANCH IF SO TO NOT ECHO
     621/    FA22 : 81 0D                      CMPA   #CR
     622/    FA24 : 26 04                      BNE    ZIN2
     623/    FA26 : 86 0A                      LDA    #LF
     624/    FA28 : 8D C2                      BSR    SEND
     625/    FA2A : 0D F4               ZIN2   TST    VECTAB+_ECHO ; ECHO DESIRED
     626/    FA2C : 26 0B                      BNE    ZOTCH3
     627/    FA2E :                     ;* FALL THROUGH TO OUTCH
     628/    FA2E :                     
     629/    FA2E :                     ;***********************************************
     630/    FA2E :                     ;*              [SWI FUNCTION 1]
     631/    FA2E :                     ;*          OUTCH - OUTPUT CHARACTER FROM A
     632/    FA2E :                     ;*  INPUT:  NONE
     633/    FA2E :                     ;*  OUTPUT: IF LINEFEED IS THE OUTPUT CHARACTER THEN
     634/    FA2E :                     ;*          C=0 NO CTL-X RECEIVED, C=1 CTL-X RECEIVED
     635/    FA2E :                     ;***********************************************
     636/    FA2E : A6 61               ZOTCH1 LDA    1,S      ; LOAD CHARACTER TO SEND
     637/    FA30 : 30 8C 09                   LEAX   <ZPCRLS,PCR ; DEFAULT FOR LINE FEED
     638/    FA33 : 81 0A                      CMPA   #LF      ; ? LINE FEED
     639/    FA35 : 27 0F                      BEQ    ZPDTLP   ; BRANCH TO CHECK PAUSE IF SO
     640/    FA37 : 8D B3               ZOTCH2 BSR    SEND     ; SEND TO OUTPUT ROUTINE
     641/    FA39 : 0C 90               ZOTCH3 INC    SWICNT   ; BUMP UP "SWI" TRACE NEST LEVEL
     642/    FA3B : 3B                         RTI             ; RETURN FROM "SWI" FUNCTION
     643/    FA3C :                     
     644/    FA3C :                     ;**************************************************
     645/    FA3C :                     ;*              [SWI FUNCTION 6]
     646/    FA3C :                     ;*        PCRLF - SEND CR/LF TO CONSOLE HANDLER
     647/    FA3C :                     ;*  INPUT: NONE
     648/    FA3C :                     ;*  OUTPUT: CR AND LF SENT TO HANDLER
     649/    FA3C :                     ;*          C=0 NO CTL-X, C=1 CTL-X RECEIVED
     650/    FA3C :                     ;**************************************************
     651/    FA3C :                     
     652/    FA3C : 04                  ZPCRLS FCB    EOT      ; NULL STRING
     653/    FA3D :                     
     654/    FA3D : 30 8C FC            ZPCRLF LEAX   ZPCRLS,PCR ; READY CR,LF STRING
     655/    FA40 :                     ;* FALL INTO CR/LF CODE
     656/    FA40 :                     
     657/    FA40 :                     ;*************************************************
     658/    FA40 :                     ;*              [SWI FUNCTION 3]
     659/    FA40 :                     ;*        PDATA - OUTPUT CR/LF AND STRING
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 12 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     660/    FA40 :                     ;* INPUT: X->STRING
     661/    FA40 :                     ;* OUTPUT: CR/LF AND STRING SENT TO OUTPUT CONSOLE
     662/    FA40 :                     ;*         HANDLER
     663/    FA40 :                     ;*     C=0 NO CTL-X, C=1 CTL-X RECEIVED
     664/    FA40 :                     ;* NOTE: LINE FEED MUST FOLLOW CARRIAGE RETURN FOR
     665/    FA40 :                     ;*       PROPER PUNCH DATA.
     666/    FA40 :                     ;*************************************************
     667/    FA40 : 86 0D               ZPDATA LDA    #CR      ; LOAD CARRIAGE RETURN
     668/    FA42 : 8D A8                      BSR    SEND     ; SEND IT
     669/    FA44 : 86 0A                      LDA    #LF      ; LOAD LINE FEED
     670/    FA46 :                     ;* FALL INTO PDATA1
     671/    FA46 :                     
     672/    FA46 :                     ;*************************************************
     673/    FA46 :                     ;*              [SWI FUNCTION 2]
     674/    FA46 :                     ;*         PDATA1 - OUTPUT STRING TILL EOT ($04)
     675/    FA46 :                     ;*  THIS ROUTINE PAUSES IF AN INPUT BYTE BECOMES
     676/    FA46 :                     ;*  AVAILABLE DURING OUTPUT TRANSMISSION UNTIL A
     677/    FA46 :                     ;*  SECOND IS RECEIVED.
     678/    FA46 :                     ;* INPUT: X->STRING
     679/    FA46 :                     ;* OUTPUT: STRING SENT TO OUTPUT CONSOLE DRIVER
     680/    FA46 :                     ;*         C=0 NO CTL-X, C=1 CTL-X RECEIVED
     681/    FA46 :                     ;*************************************************
     682/    FA46 : 8D A4               ZPDTLP BSR    SEND     ; SEND CHARACTER TO DRIVER
     683/    FA48 : A6 80               ZPDAT1 LDA    ,X+      ; LOAD NEXT CHARACTER
     684/    FA4A : 81 04                      CMPA   #EOT     ; ? EOT
     685/    FA4C : 26 F8                      BNE    ZPDTLP   ; LOOP IF NOT
     686/    FA4E :                     ;* FALL INTO PAUSE CHECK FUNCTION
     687/    FA4E :                     
     688/    FA4E :                     ;********************************************
     689/    FA4E :                     ;*            [SWI FUNCTION 12]
     690/    FA4E :                     ;*     PAUSE - RETURN TO TASK DISPATCHING AND CHECK
     691/    FA4E :                     ;*             FOR FREEZE CONDITION OR CTL-X BREAK
     692/    FA4E :                     ;*  THIS FUNCTION ENTERS THE TASK PAUSE HANDLER SO
     693/    FA4E :                     ;*  OPTIONALLY OTHER 6809 PROCESSOR MAY GAIN CONTROL.
     694/    FA4E :                     ;*  UPON RETURN, CHECK FOR A 'FREEZE' CONDITION
     695/    FA4E :                     ;*  WITH A RESULTING WAIT LOOP, OR CONDITION CODE
     696/    FA4E :                     ;*  RETURN IF A CONTROL-X IS ENTERED FROM THE INPUT
     697/    FA4E :                     ;*  HANDLER.
     698/    FA4E :                     ;* OUTPUT: C=1 IF CTL-X HAS ENTERED, C=0 OTHERWISE
     699/    FA4E :                     ;******************************************
     700/    FA4E : 8D 1E               ZPAUSE BSR    XQPAUS   ; RELEASE CONTROL AT EVERY LINE
     701/    FA50 : 8D 06                      BSR    CHKABT   ; CHECK FOR FREEZE OR ABORT
     702/    FA52 : 1F A9                      TFR    CC,B     ; PREPARE TO REPLACE CC
     703/    FA54 : E7 E4                      STB    ,S       ; OVERLAY OLD CCR ON STACK
     704/    FA56 : 20 E1                      BRA    ZOTCH3   ; RETURN FROM "SWI"
     705/    FA58 :                     
     706/    FA58 :                     ;* CHKABT - SCAN FOR INPUT PAUSE/ABORT DURING OUTPUT
     707/    FA58 :                     ;* OUTPUT: C=0 OK, C=1 ABORT (CTL-X ISSUED)
     708/    FA58 :                     ;* VOLATILE U,X,D
     709/    FA58 : 8D 18               CHKABT BSR    XQCIDT   ; ATTEMPT INPUT
     710/    FA5A : 24 05                      BCC    CHKRTN   ; BRANCH NO TO RETURN
     711/    FA5C : 81 18                      CMPA   #CAN     ; ? CTL-X FOR ABORT
     712/    FA5E : 26 02                      BNE    CHKWT    ; BRANCH NO TO PUASE
     713/    FA60 : 53                  CHKSEC COMB            ; SET CARRY
     714/    FA61 : 39                  CHKRTN RTS             ; RETURN TO CALLER WITH CC SET
     715/    FA62 : 8D 0A               CHKWT  BSR    XQPAUS   ; PAUSE FOR A MOMENT
     716/    FA64 : 8D 0C                      BSR    XQCIDT   ; ? KEY FOR START
     717/    FA66 : 24 FA                      BCC    CHKWT    ; LOOP UNTIL RECEIVED
     718/    FA68 : 81 18                      CMPA   #CAN     ; ? ABORT SIGNALED FROM WAIT
     719/    FA6A : 27 F4                      BEQ    CHKSEC   ; BRANCH YES
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 13 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     720/    FA6C : 4F                         CLRA            ; SET C=0 FOR NO ABORT
     721/    FA6D : 39                         RTS             ; AND RETURN
     722/    FA6E :                     
     723/    FA6E :                     ;* SAVE MEMORY WITH JUMPS
     724/    FA6E : 6E 9D E5 78         XQPAUS JMP    [VECTAB+_PAUSE,PCR] ; TO PAUSE ROUTINE
     725/    FA72 : AD 9D E5 62         XQCIDT JSR    [VECTAB+_CIDTA,PCR] ; TO INPUT ROUTINE
     726/    FA76 : 84 7F                      ANDA   #$7F     ; STRIP PARITY
     727/    FA78 : 39                         RTS
     728/    FA79 :                     
     729/    FA79 :                     ;********************************************
     730/    FA79 :                     ;*          NMI DEFAULT INTERRUPT HANDLER
     731/    FA79 :                     ;*  THE NMI HANDLER IS USED FOR TRACING INSTRUCTIONS.
     732/    FA79 :                     ;*  TRACE PRINTOUTS OCCUR ONLY AS LONG AS THE STACK
     733/    FA79 :                     ;*  TRACE LEVEL IS NOT BREACHED BY FALLING BELOW IT.
     734/    FA79 :                     ;*  TRACING CONTINUES UNTIL THE COUNT TURNS ZERO OR
     735/    FA79 :                     ;*  A CTL-X IS ENTERED FROM THE INPUT CONSOLE DEVICE.
     736/    FA79 :                     ;*********************************************
     737/    FA79 :                     
     738/    FA79 : 4F 50 2D 04         MSHOWP FCB    'O','P','-',EOT ; OPCODE PREP
     739/    FA7D :                     
     740/    FA7D : 8D 42               NMIR   BSR    LDDP     ; LOAD PAGE AND VERIFY STACK
     741/    FA7F : 0D 8F                      TST    MISFLG   ; ? THRU A BREAKPOINT
     742/    FA81 : 26 34                      BNE    NMICON   ; BRANCH IF SO TO CONTINUE
     743/    FA83 : 0D 90                      TST    SWICNT   ; ? INHIBIT "SWI" DURING TRACE
     744/    FA85 : 2B 29                      BMI    NMITRC   ; BRANCH YES
     745/    FA87 : 30 6C                      LEAX   12,S     ; OBTAIN USERS STACK POINTER
     746/    FA89 : 9C F8                      CMPX   SLEVEL   ; ? TO TRACE HERE
     747/    FA8B : 25 23                      BLO    NMITRC   ; BRANCH IF TOO LOW TO DISPLAY
     748/    FA8D : 30 8C E9                   LEAX   MSHOWP,PCR ; LOAD OP PREP
     749/    FA90 : 3F                         SWI             ; SEND TO CONTINUE
     750/    FA91 : 02                         FCB    PDATA1   ; FUNCTION
     751/    FA92 : 09 8E                      ROL    DELIM    ; SAVE CARRY BIT
     752/    FA94 : 30 8D E5 01                LEAX   LASTOP,PCR ; POINT TO LAST OP
     753/    FA98 : 3F                         SWI             ; SEND OUT AS HEX
     754/    FA99 : 05                         FCB    OUT4HS   ; FUNCTION
     755/    FA9A : 8D 17                      BSR    REGPRS   ; FOLLOW MEMORY WITH REGISTERS
     756/    FA9C : 25 37                      BCS    ZBKCMD   ; BRANCH IF "CANCELED"
     757/    FA9E : 06 8E                      ROR    DELIM    ; RESTORE CARRY BIT
     758/    FAA0 : 25 33                      BCS    ZBKCMD   ; BRANCH IF "CANCELED"
     759/    FAA2 : 9E 91                      LDX    TRACEC   ; LOAD TRACE COUNT
     760/    FAA4 : 27 2F                      BEQ    ZBKCMD   ; IF ZERO TO COMMAND HANDLER
     761/    FAA6 : 30 1F                      LEAX   -1,X     ; MINUS ONE
     762/    FAA8 : 9F 91                      STX    TRACEC   ; REFRESH
     763/    FAAA : 27 29                      BEQ    ZBKCMD   ; STOP TRACE WHEN ZERO
     764/    FAAC : 8D AA                      BSR    CHKABT   ; ? ABORT THE TRACE
     765/    FAAE : 25 25                      BCS    ZBKCMD   ; BRANCH YES TO COMMAND HANDLER
     766/    FAB0 : 16 03 F7            NMITRC LBRA   CTRCE3   ; NO, TRACE ANOTHER INSTRUCTION
     767/    FAB3 :                     
     768/    FAB3 : 17 01 B9            REGPRS LBSR   REGPRT   ; PRINT REGISTERS AS FROM COMMAND
     769/    FAB6 : 39                         RTS
     770/    FAB7 :                     
     771/    FAB7 :                     ;* JUST EXECUTED THRU A BRKPNT.  NOW CONTINUE NORMALLY
     772/    FAB7 : 0F 8F               NMICON CLR    MISFLG   ; CLEAR THRU FLAG
     773/    FAB9 : 17 02 EB                   LBSR   ARMBK2   ; ARM BREAKPOINTS
     774/    FABC : 3B                  RTI    RTI             ; AND CONTINUE USERS PROGRAM
     775/    FABD :                     
     776/    FABD :                     ;* LDDP - SETUP DIRECT PAGE REGISTER, VERIFY STACK.
     777/    FABD :                     ;* AN INVALID STACK CAUSES A RETURN TO THE COMMAND
     778/    FABD :                     ;* HANDLER.
     779/    FABD :                     ;* INPUT: FULLY STACKED REGISTERS FROM AN INTERRUPT
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 14 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     780/    FABD :                     ;* OUTPUT: DPR LOADED TO WORK PAGE
     781/    FABD :                     
     782/    FABD : 3F 07 20 04         ERRMSG FCB    '?',BELL,$20,EOT ; ERROR RESPONSE
     783/    FAC1 :                     
     784/    FAC1 : E6 8D E4 D8         LDDP   LDB    BASEPG,PCR ; LOAD DIRECT PAGE HIGH BYTE
     785/    FAC5 : 1F 9B                      TFR    B,DP     ; SETUP DIRECT PAGE REGISTER
     786/    FAC7 : A1 63                      CMPA   3,S      ; ? IS STACK VALID
     787/    FAC9 : 27 25                      BEQ    RTS      ; YES RETURN
     788/    FACB : 10 DE 97                   LDS    RSTACK   ; RESET TO INITIAL STACK POINTER
     789/    FACE : 30 8C EC            ERROR  LEAX   ERRMSG,PCR ; LOAD ERROR REPORT
     790/    FAD1 : 3F                         SWI             ; SEND OUT BEFORE REGISTERS
     791/    FAD2 : 03                         FCB    PDATA    ; ON NEXT LINE
     792/    FAD3 :                     ;* FALL INTO BREAKPOINT HANDLER
     793/    FAD3 :                     
     794/    FAD3 :                     ;*************************************************
     795/    FAD3 :                     ;*             [SWI FUNCTION 10]
     796/    FAD3 :                     ;*         BREAKPOINT PROGRAM FUNCTION
     797/    FAD3 :                     ;*  PRINT REGISTERS AND GOT TO COMMAND HANDLER
     798/    FAD3 :                     ;*************************************************
     799/    FAD3 : 8D DE               ZBKPNT BSR    REGPRS   ; PRINT OUT REGISTERS
     800/    FAD5 : 16 FE 21            ZBKCMD LBRA   CMDNEP   ; NOW ENTER COMMAND HANDLER
     801/    FAD8 :                     
     802/    FAD8 :                     ;********************************************
     803/    FAD8 :                     ;*    IRQ, RESERVED, SWI2 AND SWI3 INTERRUPT HANDLER
     804/    FAD8 :                     ;*  THE DEFAULT HANDLING IS TO CAUSE A BREAKPOINT.
     805/    FAD8 :                     ;********************************************
     806/    FAD8 : =$FAD8               SWI2R  EQU    *        ; SWI2 ENTRY
     807/    FAD8 : =$FAD8               SWI3R  EQU    *        ; SWI3 ENTRY
     808/    FAD8 : =$FAD8               IRQR   EQU    *        ; IRQ ENTRY
     809/    FAD8 : 8D E7               RSRVDR BSR    LDDP     ; SET BASE PAGE, VALIDATE STACK
     810/    FADA : 20 F7                      BRA    ZBKPNT   ; FORCE A BREAKPOINT
     811/    FADC :                     
     812/    FADC :                     ;******************************************
     813/    FADC :                     ;*        FIRQ HANDLER
     814/    FADC :                     ;*  JUST RETURN FOR THE FIRQ INTERRUPT
     815/    FADC :                     ;******************************************
     816/    FADC : =$FABC               FIRQR  EQU    RTI      ; IMMEDIATE RETURN
     817/    FADC :                     
     818/    FADC :                     ;**************************************************
     819/    FADC :                     ;*      DEFAULT I/O DRIVERS
     820/    FADC :                     ;**************************************************
     821/    FADC :                     
     822/    FADC :                     ;* CIDTA - RETURN CONSOLE INPUT CHARACTER
     823/    FADC :                     ;* OUTPUT: C=0 IF NO DATA READY, C=1 A=CHARACTER
     824/    FADC :                     ;* U VOLATILE
     825/    FADC : DE F0               CIDAT  LDU    VECTAB+_ACIA ; * LOAD ACIA ADDRESS
     826/    FADE : A6 C4                      LDA    ,U       ; LOAD STATUS REGISTER
     827/    FAE0 : 44                         LSRA            ; TEST RECEIVE REGISTER FLAG
     828/    FAE1 : 24 02                      BCC    CIRTN    ; RETURN IF NOTHING
     829/    FAE3 : A6 41                      LDA    1,U      ; LOAD DATA BYTE
     830/    FAE5 : 39                  CIRTN  RTS             ; RETURN TO CALLER
     831/    FAE6 :                     
     832/    FAE6 :                     ;* CION - INPUT CONSOLE INITIALIZATION
     833/    FAE6 :                     ;* COON - OUTPUT CONSOLE INITIALIZATION
     834/    FAE6 :                     ;* A,X  VOLATILE
     835/    FAE6 : =$FAE6               CION   EQU    *
     836/    FAE6 : 86 03               COON   LDA    #3       ; RESET ACIA CODE
     837/    FAE8 : 9E F0                      LDX    VECTAB+_ACIA ; LOAD ACIA ADDRESS
     838/    FAEA : A7 84                      STA    ,X       ; STORE INTO CONTROL REGISTER
     839/    FAEC : 86 51                      LDA    #$51     ; SET CONTROL
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 15 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     840/    FAEE : A7 84                      STA    ,X       ; REGISTER UP
     841/    FAF0 : 39                  RTS    RTS             ; RETURN TO CALLER
     842/    FAF1 :                     
     843/    FAF1 :                     ;* THE FOLLOWING HAVE NO DUTIES TO PERFORM
     844/    FAF1 : =$FAF0               CIOFF  EQU    RTS      ; CONSOLE INPUT OFF
     845/    FAF1 : =$FAF0               COOFF  EQU    RTS      ; CONSOLE OUTPUT OFF
     846/    FAF1 :                     
     847/    FAF1 :                     ;* CODAT - OUTPUT CHARACTER TO CONSOLE DEVICE
     848/    FAF1 :                     ;* INPUT: A=CHARACTER TO SEND
     849/    FAF1 :                     ;* OUTPUT: CHAR SENT TO TERMINAL WITH PROPER PADDING
     850/    FAF1 :                     ;* ALL REGISTERS TRANSPARENT
     851/    FAF1 :                     
     852/    FAF1 : 34 47               CODAT  PSHS   U,D,CC   ; SAVE REGISTERS,WORK BYTE
     853/    FAF3 : DE F0                      LDU    VECTAB+_ACIA ; ADDRESS ACIA
     854/    FAF5 : 8D 1B                      BSR    CODTAO   ; CALL OUTPUT CHAR SUBROUTINE
     855/    FAF7 : 81 10                      CMPA   #DLE     ; ? DATA LINE ESCAPE
     856/    FAF9 : 27 12                      BEQ    CODTRT   ; YES, RETURN
     857/    FAFB : D6 F2                      LDB    VECTAB+_PAD ; LOAD DEFAULT CHARACTER PAD COUNT
     858/    FAFD : 81 0D                      CMPA   #CR      ; ? CR
     859/    FAFF : 26 02                      BNE    CODTPD   ; BRANCH NO
     860/    FB01 : D6 F3                      LDB    VECTAB+_PAD+1 ; LOAD NEW LINE PAD COUNT
     861/    FB03 : 4F                  CODTPD CLRA            ; CREATE NULL
     862/    FB04 : E7 E4                      STB    ,S       ; SAVE COUNT
     863/    FB06 : 8C                         FCB    SKIP2    ; ENTER LOOP
     864/    FB07 : 8D 09               CODTLP BSR    CODTAO   ; SEND NULL
     865/    FB09 : 6A E4                      DEC    ,S       ; ? FINISHED
     866/    FB0B : 2A FA                      BPL    CODTLP   ; NO, CONTINUE WITH MORE
     867/    FB0D : 35 C7               CODTRT PULS   PC,U,D,CC ; RESTORE REGISTERS AND RETURN
     868/    FB0F :                     
     869/    FB0F : 17 FF 5C            CODTAD LBSR   XQPAUS   ; TEMPORARY GIVE UP CONTROL
     870/    FB12 : E6 C4               CODTAO LDB    ,U       ; LOAD ACIA STATUS REGISTER
     871/    FB14 : C5 02                      BITB   #$02     ; ? TX REGISTER EMPTY
     872/    FB16 : 27 F7                      BEQ    CODTAD   ; RELEASE CONTROL IF NOT
     873/    FB18 : A7 41                      STA    1,U      ; STORE INTO DATA REGISTER
     874/    FB1A : 39                         RTS             ; RETURN TO CALLER
     875/    FB1B :                     ;*E
     876/    FB1B :                     
     877/    FB1B :                     ;* BSON - TURN ON READ/VERIFY/PUNCH MECHANISM
     878/    FB1B :                     ;* A IS VOLATILE
     879/    FB1B :                     
     880/    FB1B : 86 11               BSON   LDA    #$11     ; SET READ CODE
     881/    FB1D : 6D 66                      TST    6,S      ; ? READ OR VERIFY
     882/    FB1F : 26 01                      BNE    BSON2    ; BRANCH YES
     883/    FB21 : 4C                         INCA            ; SET TO WRITE
     884/    FB22 : 3F                  BSON2  SWI             ; PERFORM OUTPUT
     885/    FB23 : 01                         FCB    OUTCH    ; FUNCTION
     886/    FB24 : 0C 8F                      INC    MISFLG   ; SET LOAD IN PROGRESS FLAG
     887/    FB26 : 39                         RTS             ; RETURN TO CALLER
     888/    FB27 :                     
     889/    FB27 :                     ;* BSOFF - TURN OFF READ/VERIFY/PUNCH MECHANISM
     890/    FB27 :                     ;* A,X VOLATILE
     891/    FB27 : 86 14               BSOFF  LDA    #$14     ; TO DC4 - STOP
     892/    FB29 : 3F                         SWI             ; SEND OUT
     893/    FB2A : 01                         FCB    OUTCH    ; FUNCTION
     894/    FB2B : 4A                         DECA            ; CHANGE TO DC3 (X=OFF)
     895/    FB2C : 3F                         SWI             ; SEND OUT
     896/    FB2D : 01                         FCB    OUTCH    ; FUNCTION
     897/    FB2E : 0A 8F                      DEC    MISFLG   ; CLEAR LOAD IN PROGRESS FLAG
     898/    FB30 : 8E 61 A8                   LDX    #25000   ; DELAY 1 SECOND (2MHZ CLOCK)
     899/    FB33 : 30 1F               BSOFLP LEAX   -1,X     ; COUNT DOWN
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 16 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     900/    FB35 : 26 FC                      BNE    BSOFLP   ; LOOP TILL DONE
     901/    FB37 : 39                         RTS             ; RETURN TO CALLER
     902/    FB38 :                     
     903/    FB38 :                     ;* BSDAT - READ/VERIFY/PUNCH HANDLER
     904/    FB38 :                     ;* INPUT: S+6=CODE BYTE, VERIFY(-1),PUNCH(0),LOAD(1)
     905/    FB38 :                     ;*        S+4=START ADDRESS
     906/    FB38 :                     ;*        S+2=STOP ADDRESS
     907/    FB38 :                     ;*        S+0=RETURN ADDRESS
     908/    FB38 :                     ;* OUTPUT: Z=1 NORMAL COMPLETION, Z=0 INVALID LOAD/VER
     909/    FB38 :                     ;* REGISTERS ARE VOLATILE
     910/    FB38 :                     
     911/    FB38 : EE 62               BSDAT  LDU    2,S      ; U=TO ADDRESS OR OFFSET
     912/    FB3A : 6D 66                      TST    6,S      ; ? PUNCH
     913/    FB3C : 27 54                      BEQ    BSDPUN   ; BRANCH YES
     914/    FB3E :                     ;* DURING READ/VERIFY: S+2=MSB ADDRESS SAVE BYTE
     915/    FB3E :                     ;*                     S+1=BYTE COUNTER
     916/    FB3E :                     ;*                     S+0=CHECKSUM
     917/    FB3E :                     ;*                     U=OFFSET
     918/    FB3E : 32 7D                      LEAS   -3,S     ; ROOM FOR WORK/COUNTER/CHECKSUM
     919/    FB40 : 3F                  BSDLD1 SWI             ; GET NEXT CHARACTER
     920/    FB41 : 00                         FCB    INCHNP   ; FUNCTION
     921/    FB42 : 81 53               BSDLD2 CMPA   #'S'     ; ? START OF S1/S9
     922/    FB44 : 26 FA                      BNE    BSDLD1   ; BRANCH NOT
     923/    FB46 : 3F                         SWI             ; GET NEXT CHARACTER
     924/    FB47 : 00                         FCB    INCHNP   ; FUNCTION
     925/    FB48 : 81 39                      CMPA   #'9'     ; ? HAVE S9
     926/    FB4A : 27 22                      BEQ    BSDSRT   ; YES, RETURN GOOD CODE
     927/    FB4C : 81 31                      CMPA   #'1'     ; ? HAVE NEW RECORD
     928/    FB4E : 26 F2                      BNE    BSDLD2   ; BRANCH IF NOT
     929/    FB50 : 6F E4                      CLR    ,S       ; CLEAR CHECKSUM
     930/    FB52 : 8D 21                      BSR    BYTE     ; OBTAIN BYTE COUNT
     931/    FB54 : E7 61                      STB    1,S      ; SAVE FOR DECREMENT
     932/    FB56 :                     ;* READ ADDRESS
     933/    FB56 : 8D 1D                      BSR    BYTE     ; OBTAIN HIGH VALUE
     934/    FB58 : E7 62                      STB    2,S      ; SAVE IT
     935/    FB5A : 8D 19                      BSR    BYTE     ; OBTAIN LOW VALUE
     936/    FB5C : A6 62                      LDA    2,S      ; MAKE D=VALUE
     937/    FB5E : 31 CB                      LEAY   D,U      ; Y=ADDRESS+OFFSET
     938/    FB60 :                     ;* STORE TEXT
     939/    FB60 : 8D 13               BSDNXT BSR    BYTE     ; NEXT BYTE
     940/    FB62 : 27 0C                      BEQ    BSDEOL   ; BRANCH IF CHECKSUM
     941/    FB64 : 6D 69                      TST    9,S      ; ? VERIFY ONLY
     942/    FB66 : 2B 02                      BMI    BSDCMP   ; YES, ONLY COMPARE
     943/    FB68 : E7 A4                      STB    ,Y       ; STORE INTO MEMORY
     944/    FB6A : E1 A0               BSDCMP CMPB   ,Y+      ; ? VALID RAM
     945/    FB6C : 27 F2                      BEQ    BSDNXT   ; YES, CONTINUE READING
     946/    FB6E : 35 92               BSDSRT PULS   PC,X,A   ; RETURN WITH Z SET PROPER
     947/    FB70 :                     
     948/    FB70 : 4C                  BSDEOL INCA            ; ? VALID CHECKSUM
     949/    FB71 : 27 CD                      BEQ    BSDLD1   ; BRANCH YES
     950/    FB73 : 20 F9                      BRA    BSDSRT   ; RETURN Z=0 INVALID
     951/    FB75 :                     
     952/    FB75 :                     ;* BYTE BUILD 8 BIT VALUE FROM TWO HEX DIGITS IN
     953/    FB75 : 8D 12               BYTE   BSR    BYTHEX   ; OBTAIN FIRST HEX
     954/    FB77 : C6 10                      LDB    #16      ; PREPARE SHIFT
     955/    FB79 : 3D                         MUL             ; OVER TO A
     956/    FB7A : 8D 0D                      BSR    BYTHEX   ; OBTAIN SECOND HEX
     957/    FB7C : 34 04                      PSHS   B        ; SAVE HIGH HEX
     958/    FB7E : AB E0                      ADDA   ,S+      ; COMBINE BOTH SIDES
     959/    FB80 : 1F 89                      TFR    A,B      ; SEND BACK IN B
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 17 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


     960/    FB82 : AB 62                      ADDA   2,S      ; COMPUTE NEW CHECKSUM
     961/    FB84 : A7 62                      STA    2,S      ; STORE BACK
     962/    FB86 : 6A 63                      DEC    3,S      ; DECREMENT BYTE COUNT
     963/    FB88 : 39                  BYTRTS RTS             ; RETURN TO CALLER
     964/    FB89 :                     
     965/    FB89 : 3F                  BYTHEX SWI             ; GET NEXT HEX
     966/    FB8A : 00                         FCB    INCHNP   ; CHARACTER
     967/    FB8B : 17 01 D4                   LBSR   CNVHEX   ; CONVERT TO HEX
     968/    FB8E : 27 F8                      BEQ    BYTRTS   ; RETURN IF VALID HEX
     969/    FB90 : 35 F2                      PULS   PC,U,Y,X,A ; RETURN TO CALLER WITH Z=0
     970/    FB92 :                     
     971/    FB92 :                     ;* PUNCH STACK USE: S+8=TO ADDRESS
     972/    FB92 :                     ;*                  S+6=RETURN ADDRESS
     973/    FB92 :                     ;*                  S+4=SAVED PADDING VALUES
     974/    FB92 :                     ;*                  S+2=FROM ADDRESS
     975/    FB92 :                     ;*                  S+1=FRAME COUNT/CHECKSUM
     976/    FB92 :                     ;*                  S+0=BYTE COUNT
     977/    FB92 : DE F2               BSDPUN LDU    VECTAB+_PAD ; LOAD PADDING VALUES
     978/    FB94 : AE 64                      LDX    4,S      ; X=FROM ADDRESS
     979/    FB96 : 34 56                      PSHS   U,X,D    ; CREATE STACK WORK AREA
     980/    FB98 : CC 00 18                   LDD    #24      ; SET A=0, B=24
     981/    FB9B : D7 F2                      STB    VECTAB+_PAD ; SETUP 24 CHARACTER PADS
     982/    FB9D : 3F                         SWI             ; SEND NULLS OUT
     983/    FB9E : 01                         FCB    OUTCH    ; FUNCTION
     984/    FB9F : C6 04                      LDB    #4       ; SETUP NEW LINE PAD TO 4
     985/    FBA1 : DD F2                      STD    VECTAB+_PAD ; SETUP PUNCH PADDING
     986/    FBA3 :                     ;* CALCULATE SIZE
     987/    FBA3 : EC 68               BSPGO  LDD    8,S      ; LOAD TO
     988/    FBA5 : A3 62                      SUBD   2,S      ; MINUS FROM=LENGTH
     989/    FBA7 : 10 83 00 18                CMPD   #24      ; ? MORE THAN 23
     990/    FBAB : 25 02                      BLO    BSPOK    ; NO, OK
     991/    FBAD : C6 17                      LDB    #23      ; FORCE TO 23 MAX
     992/    FBAF : 5C                  BSPOK  INCB            ; PREPARE COUNTER
     993/    FBB0 : E7 E4                      STB    ,S       ; STORE BYTE COUNT
     994/    FBB2 : CB 03                      ADDB   #3       ; ADJUST TO FRAME COUNT
     995/    FBB4 : E7 61                      STB    1,S      ; SAVE
     996/    FBB6 :                     ;* PUNCH CR,LF,NULS,S,1
     997/    FBB6 : 30 8C 33                   LEAX   <BSPSTR,PCR ; LOAD START RECORD HEADER
     998/    FBB9 : 3F                         SWI             ; SEND OUT
     999/    FBBA : 03                         FCB    PDATA    ; FUNCTION
    1000/    FBBB :                     ;* SEND FRAME COUNT
    1001/    FBBB : 5F                         CLRB            ; INITIALIZE CHECKSUM
    1002/    FBBC : 30 61                      LEAX   1,S      ; POINT TO FRAME COUNT AND ADDR
    1003/    FBBE : 8D 27                      BSR    BSPUN2   ; SEND FRAME COUNT
    1004/    FBC0 :                     ;* DATA ADDRESS
    1005/    FBC0 : 8D 25                      BSR    BSPUN2   ; SEND ADDRESS HI
    1006/    FBC2 : 8D 23                      BSR    BSPUN2   ; SEND ADDRESS LOW
    1007/    FBC4 :                     ;* PUNCH DATA
    1008/    FBC4 : AE 62                      LDX    2,S      ; LOAD START DATA ADDRESS
    1009/    FBC6 : 8D 1F               BSPMRE BSR    BSPUN2   ; SENT OUT NEXT BYTE
    1010/    FBC8 : 6A E4                      DEC    ,S       ; ? FINAL BYTE
    1011/    FBCA : 26 FA                      BNE    BSPMRE   ; LOOP IF NOT DONE
    1012/    FBCC : AF 62                      STX    2,S      ; UPDATE FROM ADDRESS VALUE
    1013/    FBCE :                     ;* PUNCH CHECKSUM
    1014/    FBCE : 53                         COMB            ; COMPLEMENT
    1015/    FBCF : E7 61                      STB    1,S      ; STORE FOR SENDOUT
    1016/    FBD1 : 30 61                      LEAX   1,S      ; POINT TO IT
    1017/    FBD3 : 8D 14                      BSR    BSPUNC   ; SEND OUT AS HEX
    1018/    FBD5 : AE 68                      LDX    8,S      ; LOAD TOP ADDRESS
    1019/    FBD7 : AC 62                      CMPX   2,S      ; ? DONE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 18 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1020/    FBD9 : 24 C8                      BHS    BSPGO    ; BRANCH NOT
    1021/    FBDB : 30 8C 11                   LEAX   <BSPEOF,PCR ; PREPARE END OF FILE
    1022/    FBDE : 3F                         SWI             ; SEND OUT STRING
    1023/    FBDF : 03                         FCB    PDATA    ; FUNCTION
    1024/    FBE0 : EC 64                      LDD    4,S      ; RECOVER PAD COUNT
    1025/    FBE2 : DD F2                      STD    VECTAB+_PAD ; RESTORE
    1026/    FBE4 : 4F                         CLRA            ; SET Z=1 FOR OK RETURN
    1027/    FBE5 : 35 D6                      PULS   PC,U,X,D ; RETURN WITH OK CODE
    1028/    FBE7 :                     
    1029/    FBE7 : EB 84               BSPUN2 ADDB   ,X       ; ADD TO CHECKSUM
    1030/    FBE9 : 16 FD ED            BSPUNC LBRA   ZOUT2H   ; SEND OUT AS HEX AND RETURN
    1031/    FBEC :                     
    1032/    FBEC : 53 31 04            BSPSTR FCB    'S','1',EOT ; CR,LF,NULLS,S,1
    1033/    FBEF : 53 39 30 33 30 30   BSPEOF FCC    'S9030000FC' ; EOF STRING
             FBF5 : 30 30 46 43       
    1034/    FBF9 : 0D 0A 04                   FCB    CR,LF,EOT
    1035/    FBFC :                     
    1036/    FBFC :                     ;* HSDTA - HIGH SPEED PRINT MEMORY
    1037/    FBFC :                     ;* INPUT: S+4=START ADDRESS
    1038/    FBFC :                     ;*        S+2=STOP ADDRESS
    1039/    FBFC :                     ;*        S+0=RETURN ADDRESS
    1040/    FBFC :                     ;* X,D VOLATILE
    1041/    FBFC :                     
    1042/    FBFC :                     ;* SEND TITLE
    1043/    FBFC : 3F                  HSDTA  SWI             ; SEND NEW LINE
    1044/    FBFD : 06                         FCB    PCRLF    ; FUNCTION
    1045/    FBFE : C6 06                      LDB    #6       ; PREPARE 6 SPACES
    1046/    FC00 : 3F                  HSBLNK SWI             ; SEND BLANK
    1047/    FC01 : 07                         FCB    SPACE    ; FUNCTION
    1048/    FC02 : 5A                         DECB            ; COUNT DOWN
    1049/    FC03 : 26 FB                      BNE    HSBLNK   ; LOOP IF MORE
    1050/    FC05 : 5F                         CLRB            ; SETUP BYTE COUNT
    1051/    FC06 : 1F 98               HSHTTL TFR    B,A      ; PREPARE FOR CONVERT
    1052/    FC08 : 17 FD DB                   LBSR   ZOUTHX   ; CONVERT TO A HEX DIGIT
    1053/    FC0B : 3F                         SWI             ; SEND BLANK
    1054/    FC0C : 07                         FCB    SPACE    ; FUNCTION
    1055/    FC0D : 3F                         SWI             ; SEND ANOTHER
    1056/    FC0E : 07                         FCB    SPACE    ; BLANK
    1057/    FC0F : 5C                         INCB            ; UP ANOTHER
    1058/    FC10 : C1 10                      CMPB   #$10     ; ? PAST 'F'
    1059/    FC12 : 25 F2                      BLO    HSHTTL   ; LOOP UNTIL SO
    1060/    FC14 : 3F                  HSHLNE SWI             ; TO NEXT LINE
    1061/    FC15 : 06                         FCB    PCRLF    ; FUNCTION
    1062/    FC16 : 25 2F                      BCS    HSDRTN   ; RETURN IF USER ENTERED CTL-X
    1063/    FC18 : 30 64                      LEAX   4,S      ; POINT AT ADDRESS TO CONVERT
    1064/    FC1A : 3F                         SWI             ; PRINT OUT ADDRESS
    1065/    FC1B : 05                         FCB    OUT4HS   ; FUNCTION
    1066/    FC1C : AE 64                      LDX    4,S      ; LOAD ADDRESS PROPER
    1067/    FC1E : C6 10                      LDB    #16      ; NEXT SIXTEEN
    1068/    FC20 : 3F                  HSHNXT SWI             ; CONVERT BYTE TO HEX AND SEND
    1069/    FC21 : 04                         FCB    OUT2HS   ; FUNCTION
    1070/    FC22 : 5A                         DECB            ; COUNT DOWN
    1071/    FC23 : 26 FB                      BNE    HSHNXT   ; LOOP IF NOT SIXTEENTH
    1072/    FC25 : 3F                         SWI             ; SEND BLANK
    1073/    FC26 : 07                         FCB    SPACE    ; FUNCTION
    1074/    FC27 : AE 64                      LDX    4,S      ; LOAD FROM ADDRESS
    1075/    FC29 : C6 10                      LDB    #16      ; COUNT
    1076/    FC2B : A6 80               HSHCHR LDA    ,X+      ; NEXT BYTE
    1077/    FC2D : 2B 04                      BMI    HSHDOT   ; TOO LARGE, TO A DOT
    1078/    FC2F : 81 20                      CMPA   #' '     ; ? LOWER THAN A BLANK
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 19 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1079/    FC31 : 24 02                      BHS    HSHCOK   ; NO, SHOW CHARACTER
    1080/    FC33 : 86 2E               HSHDOT LDA    #'.'     ; CONVERT INVALID TO A BLANK
    1081/    FC35 : 3F                  HSHCOK SWI             ; SEND CHARACTER
    1082/    FC36 : 01                         FCB    OUTCH    ; FUNCTION
    1083/    FC37 : 5A                         DECB            ; ? DONE
    1084/    FC38 : 26 F1                      BNE    HSHCHR   ; BRANCH NO
    1085/    FC3A : AC 62                      CMPX   2,S      ; ? PAST LAST ADDRESS
    1086/    FC3C : 24 09                      BHS    HSDRTN   ; QUIT IF SO
    1087/    FC3E : AF 64                      STX    4,S      ; UPDATE FROM ADDRESS
    1088/    FC40 : A6 65                      LDA    5,S      ; LOAD LOW BYTE ADDRESS
    1089/    FC42 : 48                         ASLA            ; ? TO SECTION BOUNDARY
    1090/    FC43 : 26 CF                      BNE    HSHLNE   ; BRANCH IF NOT
    1091/    FC45 : 20 B5                      BRA    HSDTA    ; BRANCH IF SO
    1092/    FC47 : 3F                  HSDRTN SWI             ; SEND NEW LINE
    1093/    FC48 : 06                         FCB    PCRLF    ; FUNCTION
    1094/    FC49 : 39                         RTS             ; RETURN TO CALLER
    1095/    FC4A :                     ;*F
    1096/    FC4A :                     
    1097/    FC4A :                     ;***********************************************
    1098/    FC4A :                     ;*     A S S I S T 0 9    C O M M A N D S
    1099/    FC4A :                     ;***********************************************
    1100/    FC4A :                     
    1101/    FC4A :                     ;*************REGISTERS - DISPLAY AND CHANGE REGISTERS
    1102/    FC4A : 8D 23               CREG   BSR    REGPRT   ; PRINT REGISTERS
    1103/    FC4C : 4C                         INCA            ; SET FOR CHANGE FUNCTION
    1104/    FC4D : 8D 21                      BSR    REGCHG   ; GO CHANGE, DISPLAY REGISTERS
    1105/    FC4F : 39                         RTS             ; RETURN TO COMMAND PROCESSOR
    1106/    FC50 :                     
    1107/    FC50 :                     ;********************************************
    1108/    FC50 :                     ;*      REGPRT - PRINT/CHANGE REGISTERS SUBROUTINE
    1109/    FC50 :                     ;*  WILL ABORT TO CMDBAD IF OVERFLOW DETECTED DURING
    1110/    FC50 :                     ;*  A CHANGE OPERATION.  CHANGE DISPLAYS REGISTERS WHEN
    1111/    FC50 :                     ;*  DONE.
    1112/    FC50 :                     ;* REGISTER MASK LIST CONSISTS OF:
    1113/    FC50 :                     ;*  A) CHARACTERS DENOTING REGISTER
    1114/    FC50 :                     ;*  B) ZERO FOR ONE BYTE, -1 FOR TWO
    1115/    FC50 :                     ;*  C) OFFSET ON STACK TO REGISTER POSITION
    1116/    FC50 :                     ;* INPUT: SP+4=STACKED REGISTERS
    1117/    FC50 :                     ;*        A=0 PRINT, A#0 PRINT AND CHANGE
    1118/    FC50 :                     ;* OUTPUT: (ONLY FOR REGISTER DISPLAY)
    1119/    FC50 :                     ;*         C=1 CTL-X ENTERED, C+0 OTHERWISE
    1120/    FC50 :                     ;* VOLATILE: D,X (CHANGE)
    1121/    FC50 :                     ;*           B,X (DISPLAY)
    1122/    FC50 :                     ;********************************************
    1123/    FC50 : 50 43 FF 13         REGMSK FCB    'P','C',-1,19 ; PC REG
    1124/    FC54 : 41 00 0A                   FCB    'A',0,10  ; A REG
    1125/    FC57 : 42 00 0B                   FCB    'B',0,11  ; B REG
    1126/    FC5A : 58 FF 0D                   FCB    'X',-1,13 ; X REG
    1127/    FC5D : 59 FF 0F                   FCB    'Y',-1,15 ; Y REG
    1128/    FC60 : 55 FF 11                   FCB    'U',-1,17 ; U REG
    1129/    FC63 : 53 FF 01                   FCB    'S',-1,1  ; S REG
    1130/    FC66 : 43 43 00 09                FCB    'C','C',0,9 ; CC REG
    1131/    FC6A : 44 50 00 0C                FCB    'D','P',0,12 ; DP REG
    1132/    FC6E : 00                         FCB    0        ; END OF LIST
    1133/    FC6F :                     
    1134/    FC6F : 4F                  REGPRT CLRA            ; SETUP PRINT ONLY FLAG
    1135/    FC70 : 30 E8 10            REGCHG LEAX   4+12,S   ; READY STACK VALUE
    1136/    FC73 : 34 32                      PSHS   Y,X,A    ; SAVE ON STACK WITH OPTION
    1137/    FC75 : 31 8C D8                   LEAY   REGMSK,PCR ; LOAD REGISTER MASK
    1138/    FC78 : EC A0               REGP1  LDD    ,Y+      ; LOAD NEXT CHAR OR <=0
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 20 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1139/    FC7A : 4D                         TSTA            ; ? END OF CHARACTER
    1140/    FC7B : 2F 04                      BLE    REGP2    ; BRANCH NOT A CHARACTER
    1141/    FC7D : 3F                         SWI             ; SEND TO CONSOLE
    1142/    FC7E : 01                         FCB    OUTCH    ; FUNCTION BYTE
    1143/    FC7F : 20 F7                      BRA    REGP1    ; CHECK NEXT
    1144/    FC81 : 86 2D               REGP2  LDA    #'-'     ; READY '-'
    1145/    FC83 : 3F                         SWI             ; SEND OUT
    1146/    FC84 : 01                         FCB    OUTCH    ; WITH OUTCH
    1147/    FC85 : 30 E5                      LEAX   B,S      ; X->REGISTER TO PRINT
    1148/    FC87 : 6D E4                      TST    ,S       ; ? CHANGE OPTION
    1149/    FC89 : 26 12                      BNE    REGCNG   ; BRANCH YES
    1150/    FC8B : 6D 3F                      TST    -1,Y     ; ? ONE OR TWO BYTES
    1151/    FC8D : 27 03                      BEQ    REGP3    ; BRANCH ZERO MEANS ONE
    1152/    FC8F : 3F                         SWI             ; PERFORM WORD HEX
    1153/    FC90 : 05                         FCB    OUT4HS   ; FUNCTION
    1154/    FC91 : 8C                         FCB    SKIP2    ; SKIP BYTE PRINT
    1155/    FC92 : 3F                  REGP3  SWI             ; PERFORM BYTE HEX
    1156/    FC93 : 04                         FCB    OUT2HS   ; FUNCTION
    1157/    FC94 : EC A0               REG4   LDD    ,Y+      ; TO FRONT OF NEXT ENTRY
    1158/    FC96 : 5D                         TSTB            ; ? END OF ENTRIES
    1159/    FC97 : 26 DF                      BNE    REGP1    ; LOOP IF MORE
    1160/    FC99 : 3F                         SWI             ; FORCE NEW LINE
    1161/    FC9A : 06                         FCB    PCRLF    ; FUNCTION
    1162/    FC9B : 35 B2               REGRTN PULS   PC,Y,X,A ; RESTORE STACK AND RETURN
    1163/    FC9D :                     
    1164/    FC9D : 8D 40               REGCNG BSR    BLDNNB   ; INPUT BINARY NUMBER
    1165/    FC9F : 27 10                      BEQ    REGNXC   ; IF CHANGE THEN JUMP
    1166/    FCA1 : 81 0D                      CMPA   #CR      ; ? NO MORE DESIRED
    1167/    FCA3 : 27 1E                      BEQ    REGAGN   ; BRANCH NOPE
    1168/    FCA5 : E6 3F                      LDB    -1,Y     ; LOAD SIZE FLAG
    1169/    FCA7 : 5A                         DECB            ; MINUS ONE
    1170/    FCA8 : 50                         NEGB            ; MAKE POSITIVE
    1171/    FCA9 : 58                         ASLB            ; TIMES TWO (=2 OR =4)
    1172/    FCAA : 3F                  REGSKP SWI             ; PERFORM SPACES
    1173/    FCAB : 07                         FCB    SPACE    ; FUNCTION
    1174/    FCAC : 5A                         DECB
    1175/    FCAD : 26 FB                      BNE    REGSKP   ; LOOP IF MORE
    1176/    FCAF : 20 E3                      BRA    REG4     ; CONTINUE WITH NEXT REGISTER
    1177/    FCB1 : A7 E4               REGNXC STA    ,S       ; SAVE DELIMITER IN OPTION
    1178/    FCB3 :                     ;*                     (ALWAYS > 0)
    1179/    FCB3 : DC 9B                      LDD    NUMBER   ; OBTAIN BINARY RESULT
    1180/    FCB5 : 6D 3F                      TST    -1,Y     ; ? TWO BYTES WORTH
    1181/    FCB7 : 26 02                      BNE    REGTWO   ; BRANCH YES
    1182/    FCB9 : A6 82                      LDA    ,-X      ; SETUP FOR TWO
    1183/    FCBB : ED 84               REGTWO STD    ,X       ; STORE IN NEW VALUE
    1184/    FCBD : A6 E4                      LDA    ,S       ; RECOVER DELIMITER
    1185/    FCBF : 81 0D                      CMPA   #CR      ; ? END OF CHANGES
    1186/    FCC1 : 26 D1                      BNE    REG4     ; NO, KEEP ON TRUCK'N
    1187/    FCC3 :                     ;* MOVE STACKED DATA TO NEW STACK IN CASE STACK
    1188/    FCC3 :                     ;* POINTER HAS CHANGED
    1189/    FCC3 : 30 8D E2 8A         REGAGN LEAX   TSTACK,PCR ; LOAD TEMP AREA
    1190/    FCC7 : C6 15                      LDB    #21      ; LOAD COUNT
    1191/    FCC9 : 35 02               REGTF1 PULS   A        ; NEXT BYTE
    1192/    FCCB : A7 80                      STA    ,X+      ; STORE INTO TEMP
    1193/    FCCD : 5A                         DECB            ; COUNT DOWN
    1194/    FCCE : 26 F9                      BNE    REGTF1   ; LOOP IF MORE
    1195/    FCD0 : 10 EE 88 EC                LDS    -20,X    ; LOAD NEW STACK POINTER
    1196/    FCD4 : C6 15                      LDB    #21      ; LOAD COUNT AGAIN
    1197/    FCD6 : A6 82               REGTF2 LDA    ,-X      ; NEXT TO STORE
    1198/    FCD8 : 34 02                      PSHS   A        ; BACK ONTO NEW STACK
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 21 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1199/    FCDA : 5A                         DECB            ; COUNT DOWN
    1200/    FCDB : 26 F9                      BNE    REGTF2   ; LOOP IF MORE
    1201/    FCDD : 20 BC                      BRA    REGRTN   ; GO RESTART COMMAND
    1202/    FCDF :                     
    1203/    FCDF :                     ;*********************************************
    1204/    FCDF :                     ;*  BLDNUM - BUILDS BINARY VALUE FROM INPUT HEX
    1205/    FCDF :                     ;*  THE ACTIVE EXPRESSION HANDLER IS USED.
    1206/    FCDF :                     ;* INPUT: S=RETURN ADDRESS
    1207/    FCDF :                     ;* OUTPUT: A=DELIMITER WHICH TERMINATED VALUE
    1208/    FCDF :                     ;*                            (IF DELM NOT ZERO)
    1209/    FCDF :                     ;*         "NUMBER"=WORD BINARY RESULT
    1210/    FCDF :                     ;*         Z=1 IF INPUT RECEIVED, Z=0 IF NO HEX RECEIVED
    1211/    FCDF :                     ;* REGISTERS ARE TRANSPARENT
    1212/    FCDF :                     ;**********************************************
    1213/    FCDF :                     
    1214/    FCDF :                     ;* EXECUTE SINGLE OR EXTENDED ROM EXPRESSION HANDLER
    1215/    FCDF :                     ;*
    1216/    FCDF :                     ;* THE FLAG "DELIM" IS USED AS FOLLOWS:
    1217/    FCDF :                     ;*   DELIM=0  NO LEADING BLANKS, NO FORCED TERMINATOR
    1218/    FCDF :                     ;*   DELIM=CHR  ACCEPT LEADING 'CHR'S, FORCED TERMINATOR
    1219/    FCDF : 4F                  BLDNNB CLRA            ; NO DYNAMIC DELIMITER
    1220/    FCE0 : 8C                         FCB    SKIP2    ; SKIP NEXT INSTRUCTION
    1221/    FCE1 :                     ;* BUILD WITH LEADING BLANKS
    1222/    FCE1 : 86 20               BLDNUM LDA    #' '     ; ALLOW LEADING BLANKS
    1223/    FCE3 : 97 8E                      STA    DELIM    ; STORE AS DELIMITER
    1224/    FCE5 : 6E 9D E3 03                JMP    [VECTAB+_EXPAN,PCR] ; TO EXP ANALYZER
    1225/    FCE9 :                     
    1226/    FCE9 :                     ;* THIS IS THE DEFAULT SINGLE ROM ANALYZER. WE ACCEPT:
    1227/    FCE9 :                     ;*    1) HEX INPUT
    1228/    FCE9 :                     ;*    2) 'M' FOR LAST MEMORY EXAMINE ADDRESS
    1229/    FCE9 :                     ;*    3) 'P' FOR PROGRAM COUNTER ADDRESS
    1230/    FCE9 :                     ;*    4) 'W' FOR WINDOW VALUE
    1231/    FCE9 :                     ;*    5) '@' FOR INDIRECT VALUE
    1232/    FCE9 : 34 14               EXP1   PSHS   X,B      ; SAVE REGISTERS
    1233/    FCEB : 8D 5C               EXPDLM BSR    BLDHXI   ; CLEAR NUMBER, CHECK FIRST CHAR
    1234/    FCED : 27 18                      BEQ    EXP2     ; IF HEX DIGIT CONTINUE BUILDING
    1235/    FCEF :                     ;* SKIP BLANKS IF DESIRED
    1236/    FCEF : 91 8E                      CMPA   DELIM    ; ? CORRECT DELIMITER
    1237/    FCF1 : 27 F8                      BEQ    EXPDLM   ; YES, IGNORE IT
    1238/    FCF3 :                     ;* TEST FOR M OR P
    1239/    FCF3 : 9E 9E                      LDX    ADDR     ; DEFAULT FOR 'M'
    1240/    FCF5 : 81 4D                      CMPA   #'M'     ; ? MEMORY EXAMINE ADDR WANTED
    1241/    FCF7 : 27 16                      BEQ    EXPTDL   ; BRANCH IF SO
    1242/    FCF9 : 9E 93                      LDX    PCNTER   ; DEFAULT FOR 'P'
    1243/    FCFB : 81 50                      CMPA   #'P'     ; ? LAST PROGRAM COUNTER WANTED
    1244/    FCFD : 27 10                      BEQ    EXPTDL   ; BRANCH IF SO
    1245/    FCFF : 9E A0                      LDX    WINDOW   ; DEFAULT TO WINDOW
    1246/    FD01 : 81 57                      CMPA   #'W'     ; ? WINDOW WANTED
    1247/    FD03 : 27 0A                      BEQ    EXPTDL
    1248/    FD05 : 35 94               EXPRTN PULS   PC,X,B   ; RETURN AND RESTORE REGISTERS
    1249/    FD07 :                     ;* GOT HEX, NOW CONTINUE BUILDING
    1250/    FD07 : 8D 44               EXP2   BSR    BLDHEX   ; COMPUTE NEXT DIGIT
    1251/    FD09 : 27 FC                      BEQ    EXP2     ; CONTINUE IF MORE
    1252/    FD0B : 20 0A                      BRA    EXPCDL   ; SEARCH FOR +/-
    1253/    FD0D :                     ;* STORE VALUE AND CHECK IF NEED DELIMITER
    1254/    FD0D : AE 84               EXPTDI LDX    ,X       ; INDIRECTION DESIRED
    1255/    FD0F : 9F 9B               EXPTDL STX    NUMBER   ; STORE RESULT
    1256/    FD11 : 0D 8E                      TST    DELIM    ; ? TO FORCE A DELIMITER
    1257/    FD13 : 27 F0                      BEQ    EXPRTN   ; RETURN IF NOT WITH VALUE
    1258/    FD15 : 8D 62                      BSR    READ     ; OBTAIN NEXT CHARACTER
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 22 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1259/    FD17 :                     ;* TEST FOR + OR -
    1260/    FD17 : 9E 9B               EXPCDL LDX    NUMBER   ; LOAD LAST VALUE
    1261/    FD19 : 81 2B                      CMPA   #'+'     ; ? ADD OPERATOR
    1262/    FD1B : 26 0E                      BNE    EXPCHM   ; BRANCH NOT
    1263/    FD1D : 8D 23                      BSR    EXPTRM   ; COMPUTE NEXT TERM
    1264/    FD1F : 34 02                      PSHS   A        ; SAVE DELIMITER
    1265/    FD21 : DC 9B                      LDD    NUMBER   ; LOAD NEW TERM
    1266/    FD23 : 30 8B               EXPADD LEAX   D,X      ; ADD TO X
    1267/    FD25 : 9F 9B                      STX    NUMBER   ; STORE AS NEW RESULT
    1268/    FD27 : 35 02                      PULS   A        ; RESTORE DELIMITER
    1269/    FD29 : 20 EC                      BRA    EXPCDL   ; NOW TEST IT
    1270/    FD2B : 81 2D               EXPCHM CMPA   #'-'     ; SUBTRACT OPERATOR
    1271/    FD2D : 27 07                      BEQ    EXPSUB   ; BRANCH IF SO
    1272/    FD2F : 81 40                      CMPA   #'@'     ; ? INDIRECTION DESIRED
    1273/    FD31 : 27 DA                      BEQ    EXPTDI   ; BRANCH IF SO
    1274/    FD33 : 5F                         CLRB            ; SET DELIMITER RETURN
    1275/    FD34 : 20 CF                      BRA    EXPRTN   ; AND RETURN TO CALLER
    1276/    FD36 : 8D 0A               EXPSUB BSR    EXPTRM   ; OBTAIN NEXT TERM
    1277/    FD38 : 34 02                      PSHS   A        ; SAVE DELIMITER
    1278/    FD3A : DC 9B                      LDD    NUMBER   ; LOAD UP NEXT TERM
    1279/    FD3C : 40                         NEGA            ; NEGATE A
    1280/    FD3D : 50                         NEGB            ; NEGATE B
    1281/    FD3E : 82 00                      SBCA   #0       ; CORRECT FOR A
    1282/    FD40 : 20 E1                      BRA    EXPADD   ; GO ADDD TO EXPRESSION
    1283/    FD42 :                     ;* COMPUTE NEXT EXPRESSION TERM
    1284/    FD42 :                     ;* OUTPUT: X=OLD VALUE
    1285/    FD42 :                     ;*         'NUMBER'=NEXT TERM
    1286/    FD42 : 8D 9D               EXPTRM BSR    BLDNUM   ; OBTAIN NEXT VALUE
    1287/    FD44 : 27 32                      BEQ    CNVRTS   ; RETURN IF VALID NUMBER
    1288/    FD46 : 16 FC 13            BLDBAD LBRA   CMDBAD   ; ABORT COMMAND IF INVALID
    1289/    FD49 :                     
    1290/    FD49 :                     ;*********************************************
    1291/    FD49 :                     ;*  BUILD BINARY VALUE USING INPUT CHARACTERS.
    1292/    FD49 :                     ;* INPUT: A=ASCII HEX VALUE OR DELIMITER
    1293/    FD49 :                     ;*        SP+0=RETURN ADDRESS
    1294/    FD49 :                     ;*        SP+2=16 BIT RESULT AREA
    1295/    FD49 :                     ;* OUTPUT: Z=1 A=BINARY VALUE
    1296/    FD49 :                     ;*         Z=0 IF INVALID HEX CHARACTER (A UNCHANGED)
    1297/    FD49 :                     ;* VOLATILE: D
    1298/    FD49 :                     ;****************************************
    1299/    FD49 : 0F 9B               BLDHXI CLR    NUMBER   ; CLEAR NUMBER
    1300/    FD4B : 0F 9C                      CLR    NUMBER+1 ; CLEAR NUMBER
    1301/    FD4D : 8D 2A               BLDHEX BSR    READ     ; GET INPUT CHARACTER
    1302/    FD4F : 8D 11               BLDHXC BSR    CNVHEX   ; CONVERT AND TEST CHARACTER
    1303/    FD51 : 26 25                      BNE    CNVRTS   ; RETURN IF NOT A NUMBER
    1304/    FD53 : C6 10                      LDB    #16      ; PREPARE SHIFT
    1305/    FD55 : 3D                         MUL             ; BY FOUR PLACES
    1306/    FD56 : 86 04                      LDA    #4       ; ROTATE BINARY INTO VALUE
    1307/    FD58 : 58                  BLDSHF ASLB            ; OBTAIN NEXT BIT
    1308/    FD59 : 09 9C                      ROL    NUMBER+1 ; INTO LOW BYTE
    1309/    FD5B : 09 9B                      ROL    NUMBER   ; INTO HIGH BYTE
    1310/    FD5D : 4A                         DECA            ; COUNT DOWN
    1311/    FD5E : 26 F8                      BNE    BLDSHF   ; BRANCH IF MORE TO DO
    1312/    FD60 : 20 14                      BRA    CNVOK    ; SET GOOD RETURN CODE
    1313/    FD62 :                     
    1314/    FD62 :                     ;****************************************
    1315/    FD62 :                     ;* CONVERT ASCII CHARACTER TO BINARY BYTE
    1316/    FD62 :                     ;* INPUT: A=ASCII
    1317/    FD62 :                     ;* OUTPUT: Z=1 A=BINARY VALUE
    1318/    FD62 :                     ;*         Z=0 IF INVALID
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 23 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1319/    FD62 :                     ;* ALL REGISTERS TRANSPARENT
    1320/    FD62 :                     ;* (A UNALTERED IF INVALID HEX)
    1321/    FD62 :                     ;**************************************
    1322/    FD62 : 81 30               CNVHEX CMPA   #'0'     ; ? LOWER THAN A ZERO
    1323/    FD64 : 25 12                      BLO    CNVRTS   ; BRANCH NOT VALUE
    1324/    FD66 : 81 39                      CMPA   #'9'     ; ? POSSIBLE A-F
    1325/    FD68 : 2F 0A                      BLE    CNVGOT   ; BRANCH NO TO ACCEPT
    1326/    FD6A : 81 41                      CMPA   #'A'     ; ? LESS THAN TEN
    1327/    FD6C : 25 0A                      BLO    CNVRTS   ; RETURN IF MINUS (INVALID)
    1328/    FD6E : 81 46                      CMPA   #'F'     ; ? NOT TOO LARGE
    1329/    FD70 : 22 06                      BHI    CNVRTS   ; NO, RETURN TOO LARGE
    1330/    FD72 : 80 07                      SUBA   #7       ; DOWN TO BINARY
    1331/    FD74 : 84 0F               CNVGOT ANDA   #$0F     ; CLEAR HIGH HEX
    1332/    FD76 : 1A 04               CNVOK  ORCC   #4       ; FORCE ZERO ON FOR VALID HEX
    1333/    FD78 : 39                  CNVRTS RTS             ; RETURN TO CALLER
    1334/    FD79 :                     
    1335/    FD79 :                     ;* GET INPUT CHAR, ABORT COMMAND IF CONTROL-X (CANCEL)
    1336/    FD79 : 3F                  READ   SWI             ; GET NEXT CHAR
    1337/    FD7A : 00                         FCB    INCHNP   ; FUNCTION
    1338/    FD7B : 81 18                      CMPA   #CAN     ; ? ABORT COMMAND
    1339/    FD7D : 27 C7                      BEQ    BLDBAD   ; BRANCH TO ABORT IF SO
    1340/    FD7F : 39                         RTS             ; RETURN TO CALLER
    1341/    FD80 :                     ;*G
    1342/    FD80 :                     
    1343/    FD80 :                     ;***************GO - START PROGRAM EXECUTION
    1344/    FD80 : 8D 01               CGO    BSR    GOADDR   ; BUILD ADDRESS IF NEEDED
    1345/    FD82 : 3B                         RTI             ; START EXECUTING
    1346/    FD83 :                     
    1347/    FD83 :                     ;* FIND OPTIONAL NEW PROGRAM COUNTER. ALSO ARM THE
    1348/    FD83 :                     ;* BREAKPOINTS.
    1349/    FD83 : 35 30               GOADDR PULS   X,Y      ; RECOVER RETURN ADDRESS
    1350/    FD85 : 34 10                      PSHS   X        ; STORE RETURN BACK
    1351/    FD87 : 26 19                      BNE    GONDFT   ; IF NO CARRIAGE RETURN THEN NEW PC
    1352/    FD89 :                     ;* DEFAULT PROGRAM COUNTER, SO FALL THROUGH IF
    1353/    FD89 :                     ;* IMMEDIATE BREAKPOINT.
    1354/    FD89 : 17 01 B6                   LBSR   CBKLDR   ; SEARCH BREAKPOINTS
    1355/    FD8C : AE 6C                      LDX    12,S     ; LOAD PROGRAM COUNTER
    1356/    FD8E : 5A                  ARMBLP DECB            ; COUNT DOWN
    1357/    FD8F : 2B 16                      BMI    ARMBK2   ; DONE, NONE TO SINGLE TRACE
    1358/    FD91 : A6 30                      LDA    -NUMBKP*2,Y ; PRE-FETCH OPCODE
    1359/    FD93 : AC A1                      CMPX   ,Y++     ; ? IS THIS A BREAKPOINT
    1360/    FD95 : 26 F7                      BNE    ARMBLP   ; LOOP IF NOT
    1361/    FD97 : 81 3F                      CMPA   #$3F     ; ? SWI BREAKPOINTED
    1362/    FD99 : 26 02                      BNE    ARMNSW   ; NO, SKIP SETTING OF PASS FLAG
    1363/    FD9B : 97 FB                      STA    SWIBFL   ; SHOW UPCOMING SWI NOT BRKPNT
    1364/    FD9D : 0C 8F               ARMNSW INC    MISFLG   ; FLAG THRU A BREAKPOINT
    1365/    FD9F : 16 01 06                   LBRA   CDOT     ; DO SINGLE TRACE W/O BREAKPOINT
    1366/    FDA2 :                     ;* OBTAIN NEW PROGRAM COUNTER
    1367/    FDA2 : 17 00 BB            GONDFT LBSR   CDNUM    ; OBTAIN NEW PROGRAM COUNTER
    1368/    FDA5 : ED 6C                      STD    12,S     ; STORE INTO STACK
    1369/    FDA7 : 17 01 98            ARMBK2 LBSR   CBKLDR   ; OBTAIN TABLE
    1370/    FDAA : 00 FA                      NEG    BKPTCT   ; COMPLEMENT TO SHOW ARMED
    1371/    FDAC : 5A                  ARMLOP DECB            ; ? DONE
    1372/    FDAD : 2B C9                      BMI    CNVRTS   ; RETURN WHEN DONE
    1373/    FDAF : A6 B4                      LDA    [,Y]     ; LOAD OPCODE
    1374/    FDB1 : A7 30                      STA    -NUMBKP*2,Y ; STORE INTO OPCODE TABLE
    1375/    FDB3 : 86 3F                      LDA    #$3F     ; READY "SWI" OPCODE
    1376/    FDB5 : A7 B1                      STA    [,Y++]   ; STORE AND MOVE UP TABLE
    1377/    FDB7 : 20 F3                      BRA    ARMLOP   ; AND CONTINUE
    1378/    FDB9 :                     
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 24 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1379/    FDB9 :                     ;*******************CALL - CALL ADDRESS AS SUBROUTINE
    1380/    FDB9 : 8D C8               CCALL  BSR    GOADDR   ; FETCH ADDRESS IF NEEDED
    1381/    FDBB : 35 7F                      PULS   U,Y,X,DP,D,CC ; RESTORE USERS REGISTERS
    1382/    FDBD : AD F1                      JSR    [,S++]   ; CALL USER SUBROUTINE
    1383/    FDBF : 3F                  CGOBRK SWI             ; PERFORM BREAKPOINT
    1384/    FDC0 : 0A                         FCB    BRKPT    ; FUNCTION
    1385/    FDC1 : 20 FC                      BRA    CGOBRK   ; LOOP UNTIL USER CHANGES PC
    1386/    FDC3 :                     
    1387/    FDC3 :                     ;****************MEMORY - DISPLAY/CHANGE MEMORY
    1388/    FDC3 :                     ;* CMEMN AND CMPADP ARE DIRECT ENTRY POINTS FROM
    1389/    FDC3 :                     ;* THE COMMAND HANDLER FOR QUICK COMMANDS
    1390/    FDC3 : 17 00 9A            CMEM   LBSR   CDNUM    ; OBTAIN ADDRESS
    1391/    FDC6 : DD 9E               CMEMN  STD    ADDR     ; STORE DEFAULT
    1392/    FDC8 : 9E 9E               CMEM2  LDX    ADDR     ; LOAD POINTER
    1393/    FDCA : 17 FC 0C                   LBSR   ZOUT2H   ; SEND OUT HEX VALUE OF BYTE
    1394/    FDCD : 86 2D                      LDA    #'-'     ; LOAD DELIMITER
    1395/    FDCF : 3F                         SWI             ; SEND OUT
    1396/    FDD0 : 01                         FCB    OUTCH    ; FUNCTION
    1397/    FDD1 : 17 FF 0B            CMEM4  LBSR   BLDNNB   ; OBTAIN NEW BYTE VALUE
    1398/    FDD4 : 27 0A                      BEQ    CMENUM   ; BRANCH IF NUMBER
    1399/    FDD6 :                     ;* COMMA - SKIP BYTE
    1400/    FDD6 : 81 2C                      CMPA   #','     ; ? COMMA
    1401/    FDD8 : 26 0E                      BNE    CMNOTC   ; BRANCH NOT
    1402/    FDDA : 9F 9E                      STX    ADDR     ; UPDATE POINTER
    1403/    FDDC : 30 01                      LEAX   1,X      ; TO NEXT BYTE
    1404/    FDDE : 20 F1                      BRA    CMEM4    ; AND INPUT IT
    1405/    FDE0 : D6 9C               CMENUM LDB    NUMBER+1 ; LOAD LOW BYTE VALUE
    1406/    FDE2 : 8D 47                      BSR    MUPDAT   ; GO OVERLAY MEMORY BYTE
    1407/    FDE4 : 81 2C                      CMPA   #','     ; ? CONTINUE WITH NO DISPLAY
    1408/    FDE6 : 27 E9                      BEQ    CMEM4    ; BRANCH YES
    1409/    FDE8 :                     ;*  QUOTED STRING
    1410/    FDE8 : 81 27               CMNOTC CMPA   #'\''    ; ? QUOTED STRING
    1411/    FDEA : 26 0C                      BNE    CMNOTQ   ; BRANCH NO
    1412/    FDEC : 8D 8B               CMESTR BSR    READ     ; OBTAIN NEXT CHARACTER
    1413/    FDEE : 81 27                      CMPA   #'\''    ; ? END OF QUOTED STRING
    1414/    FDF0 : 27 0C                      BEQ    CMSPCE   ; YES, QUIT STRING MODE
    1415/    FDF2 : 1F 89                      TFR    A,B      ; TO B FOR SUBROUTINE
    1416/    FDF4 : 8D 35                      BSR    MUPDAT   ; GO UPDATE BYTE
    1417/    FDF6 : 20 F4                      BRA    CMESTR   ; GET NEXT CHARACTER
    1418/    FDF8 :                     ;* BLANK - NEXT BYTE
    1419/    FDF8 : 81 20               CMNOTQ CMPA   #$20     ; ? BLANK FOR NEXT BYTE
    1420/    FDFA : 26 06                      BNE    CMNOTB   ; BRANCH NOT
    1421/    FDFC : 9F 9E                      STX    ADDR     ; UPDATE POINTER
    1422/    FDFE : 3F                  CMSPCE SWI             ; GIVE SPACE
    1423/    FDFF : 07                         FCB    SPACE    ; FUNCTION
    1424/    FE00 : 20 C6                      BRA    CMEM2    ; NOW PROMPT FOR NEXT
    1425/    FE02 :                     ;* LINE FEED - NEXT BYTE WITH ADDRESS
    1426/    FE02 : 81 0A               CMNOTB CMPA   #LF      ; LINE FEED FOR NEXT BYTE
    1427/    FE04 : 26 08                      BNE    CMNOTL   ; BRANCH NOT
    1428/    FE06 : 86 0D                      LDA    #CR      ; GIVE CARRIAGE RETURN
    1429/    FE08 : 3F                         SWI             ; TO CONSOLE
    1430/    FE09 : 01                         FCB    OUTCH    ; HANDLER
    1431/    FE0A : 9F 9E                      STX    ADDR     ; STORE NEXT ADDRESS
    1432/    FE0C : 20 0A                      BRA    CMPADP   ; BRANCH TO SHOW
    1433/    FE0E :                     ;* UP ARROW - PREVIOUS BYTE AND ADDRESS
    1434/    FE0E : 81 5E               CMNOTL CMPA   #'^'     ; UP ARROW FOR PREVIOUS BYTE
    1435/    FE10 : 26 0A                      BNE    CMNOTU   ; BRANCH NOT
    1436/    FE12 : 30 1E                      LEAX   -2,X     ; DOWN TO PREVIOUS BYTE
    1437/    FE14 : 9F 9E                      STX    ADDR     ; STORE NEW POINTER
    1438/    FE16 : 3F                  CMPADS SWI             ; FORCE NEW LINE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 25 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1439/    FE17 : 06                         FCB    PCRLF    ; FUNCTION
    1440/    FE18 : 8D 07               CMPADP BSR    PRTADR   ; GO PRINT ITS VALUE
    1441/    FE1A : 20 AC                      BRA    CMEM2    ; THEN PROMPT FOR INPUT
    1442/    FE1C :                     ;* SLASH - NEXT BYTE WITH ADDRESS
    1443/    FE1C : 81 2F               CMNOTU CMPA   #'/'     ; ? SLASH FOR CURRENT DISPLAY
    1444/    FE1E : 27 F6                      BEQ    CMPADS   ; YES, SEND ADDRESS
    1445/    FE20 : 39                         RTS             ; RETURN FROM COMMAND
    1446/    FE21 :                     
    1447/    FE21 :                     ;* PRINT CURRENT ADDRESS
    1448/    FE21 : 9E 9E               PRTADR LDX    ADDR     ; LOAD POINTER VALUE
    1449/    FE23 : 34 10                      PSHS   X        ; SAVE X ON STACK
    1450/    FE25 : 30 E4                      LEAX   ,S       ; POINT TO IT FOR DISPLAY
    1451/    FE27 : 3F                         SWI             ; DISPLAY POINTER IN HEX
    1452/    FE28 : 05                         FCB    OUT4HS   ; FUNCTION
    1453/    FE29 : 35 90                      PULS   PC,X     ; RECOVER POINTER AND RETURN
    1454/    FE2B :                     
    1455/    FE2B :                     ;* UPDATE BYTE
    1456/    FE2B : 9E 9E               MUPDAT LDX    ADDR     ; LOAD POINTER VALUE
    1457/    FE2D : E7 80                      STB    ,X+      ; SAVE X ON STACK
    1458/    FE2F : E1 1F                      CMPB   -1,X     ; ? SUCCESSFUL STORE
    1459/    FE31 : 26 03                      BNE    MUPBAD   ; BRANCH FOR '?' IF NOT
    1460/    FE33 : 9F 9E                      STX    ADDR     ; STORE NEW POINTER VALUE
    1461/    FE35 : 39                         RTS             ; BACK TO CALLER
    1462/    FE36 : 34 02               MUPBAD PSHS   A        ; SAVE A REGISTER
    1463/    FE38 : 86 3F                      LDA    #'?'     ; SHOW INVALID
    1464/    FE3A : 3F                         SWI             ; SEND OUT
    1465/    FE3B : 01                         FCB    OUTCH    ; FUNCTION
    1466/    FE3C : 35 82                      PULS   PC,A     ; RETURN TO CALLER
    1467/    FE3E :                     
    1468/    FE3E :                     ;*********************WINDOW - SET WINDOW VALUE
    1469/    FE3E : 8D 20               CWINDO BSR    CDNUM    ; OBTAIN WINDOW VALUE
    1470/    FE40 : DD A0                      STD    WINDOW   ; STORE IT IN
    1471/    FE42 : 39                         RTS             ; END COMMAND
    1472/    FE43 :                     
    1473/    FE43 :                     ;******************DISPLAY - HIGH SPEED DISPLAY MEMORY
    1474/    FE43 : 8D 1B               CDISP  BSR    CDNUM    ; FETCH ADDRESS
    1475/    FE45 : C4 F0                      ANDB   #$F0     ; FORCE TO 16 BOUNDARY
    1476/    FE47 : 1F 02                      TFR    D,Y      ; SAVE IN Y
    1477/    FE49 : 30 2F                      LEAX   15,Y     ; DEFAULT LENGTH
    1478/    FE4B : 25 04                      BCS    CDISPS   ; BRANCH IF END OF INPUT
    1479/    FE4D : 8D 11                      BSR    CDNUM    ; OBTAIN COUNT
    1480/    FE4F : 30 AB                      LEAX   D,Y      ; ASSUME COUNT, COMPUTE END ADDR
    1481/    FE51 : 34 30               CDISPS PSHS   Y,X      ; SETUP PARAMETERS FOR HSDATA
    1482/    FE53 : 10 A3 62                   CMPD   2,S      ; ? WAS IT COUNT
    1483/    FE56 : 23 02                      BLS    CDCNT    ; BRANCH YES
    1484/    FE58 : ED E4                      STD    ,S       ; STORE HIGH ADDRESS
    1485/    FE5A : AD 9D E1 84         CDCNT  JSR    [VECTAB+_HSDTA,PCR] ; CALL PRINT ROUTINE
    1486/    FE5E : 35 E0                      PULS   PC,U,Y   ; CLEAN STACK AND END COMMAND
    1487/    FE60 :                     
    1488/    FE60 :                     ;* OBTAIN NUMBER - ABORT IF NONE
    1489/    FE60 :                     ;* ONLY DELIMITERS OF CR, BLANK, OR '/' ARE ACCEPTED
    1490/    FE60 :                     ;* OUTPUT: D=VALUE, C=1 IF CARRIAGE RETURN DELIMITER,
    1491/    FE60 :                     ;*                                  ELSE C=0
    1492/    FE60 : 17 FE 7E            CDNUM  LBSR   BLDNUM   ; OBTAIN NUMBER
    1493/    FE63 : 26 09                      BNE    CDBADN   ; BRANCH IF INVALID
    1494/    FE65 : 81 2F                      CMPA   #'/'     ; ? VALID DELIMITER
    1495/    FE67 : 22 05                      BHI    CDBADN   ; BRANCH IF NOT FOR ERROR
    1496/    FE69 : 81 0E                      CMPA   #CR+1    ; LEAVE COMPARE FOR CARRIAGE RETURN
    1497/    FE6B : DC 9B                      LDD    NUMBER   ; LOAD NUMBER
    1498/    FE6D : 39                         RTS             ; RETURN WITH COMPARE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 26 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1499/    FE6E : 16 FA EB            CDBADN LBRA   CMDBAD   ; RETURN TO ERROR MECHANISM
    1500/    FE71 :                     
    1501/    FE71 :                     ;*****************PUNCH - PUNCH MEMORY IN S1-S9 FORMAT
    1502/    FE71 : 8D ED               CPUNCH BSR    CDNUM    ; OBTAIN START ADDRESS
    1503/    FE73 : 1F 02                      TFR    D,Y      ; SAVE IN Y
    1504/    FE75 : 8D E9                      BSR    CDNUM    ; OBTAIN END ADDRESS
    1505/    FE77 : 6F E2                      CLR    ,-S      ; SETUP PUNCH FUNCTION CODE
    1506/    FE79 : 34 26                      PSHS   Y,D      ; STORE VALUES ON STACK
    1507/    FE7B : AD 9D E1 65         CCALBS JSR    [VECTAB+_BSON,PCR] ; INITIALIZE HANDLER
    1508/    FE7F : AD 9D E1 63                JSR    [VECTAB+_BSDAT,PCR] ; PERFORM FUNCTION
    1509/    FE83 : 34 01                      PSHS   CC       ; SAVE RETURN CODE
    1510/    FE85 : AD 9D E1 5F                JSR    [VECTAB+_BSOFF,PCR] ; TURN OFF HANDLER
    1511/    FE89 : 35 01                      PULS   CC       ; OBTAIN CONDITION CODE SAVED
    1512/    FE8B : 26 E1                      BNE    CDBADN   ; BRANCH IF ERROR
    1513/    FE8D : 35 B2                      PULS   PC,Y,X,A ; RETURN FROM COMMAND
    1514/    FE8F :                     
    1515/    FE8F :                     ;*****************LOAD - LOAD MEMORY FROM S1-S9 FORMAT
    1516/    FE8F : 8D 01               CLOAD  BSR    CLVOFS   ; CALL SETUP AND PASS CODE
    1517/    FE91 : 01                         FCB    1        ; LOAD FUNCTION CODE FOR PACKET
    1518/    FE92 :                     
    1519/    FE92 : 33 F1               CLVOFS LEAU   [,S++]   ; LOAD CODE IN HIGH BYTE OF U
    1520/    FE94 : 33 D4                      LEAU   [,U]     ; NOT CHANGING CC AND RESTORE S
    1521/    FE96 : 27 03                      BEQ    CLVDFT   ; BRANCH IF CARRIAGE RETURN NEXT
    1522/    FE98 : 8D C6                      BSR    CDNUM    ; OBTAIN OFFSET
    1523/    FE9A : 8C                         FCB    SKIP2    ; SKIP DEFAULT OFFSET
    1524/    FE9B : 4F                  CLVDFT CLRA            ; CREATE ZERO OFFSET
    1525/    FE9C : 5F                         CLRB            ; AS DEFAULT
    1526/    FE9D : 34 4E                      PSHS   U,DP,D   ; SETUP CODE, NULL WORD, OFFSET
    1527/    FE9F : 20 DA                      BRA    CCALBS   ; ENTER CALL TO BS ROUTINE
    1528/    FEA1 :                     
    1529/    FEA1 :                     ;******************VERIFY - COMPARE MEMORY WITH FILES
    1530/    FEA1 : 8D EF               CVER   BSR    CLVOFS   ; COMPUTE OFFSET IF ANY
    1531/    FEA3 : FF                         FCB    -1       ; VERIFY FUNCTION CODE FOR PACKET
    1532/    FEA4 :                     
    1533/    FEA4 :                     ;********************TRACE - TRACE INSTRUCTIONS
    1534/    FEA4 :                     ;********************. - SINGLE STEP TRACE
    1535/    FEA4 : 8D BA               CTRACE BSR    CDNUM    ; OBTAIN TRACE COUNT
    1536/    FEA6 : DD 91                      STD    TRACEC   ; STORE COUNT
    1537/    FEA8 : 32 62               CDOT   LEAS   2,S      ; RID COMMAND RETURN FROM STACK
    1538/    FEAA : EE F8 0A            CTRCE3 LDU    [10,S]   ; LOAD OPCODE TO EXECUTE
    1539/    FEAD : DF 99                      STU    LASTOP   ; STORE FOR TRACE INTERRUPT
    1540/    FEAF : DE F6                      LDU    VECTAB+_PTM ; LOAD PTM ADDRESS
    1541/    FEB1 : CC 07 01                   LDD    #(7<<8)+1  ; CYCLES DOWN+CYCLES UP
    1542/    FEB4 : ED 42                      STD    PTMTM1-PTM,U ; START NMI TIMEOUT
    1543/    FEB6 : 3B                         RTI             ; RETURN FOR ONE INSTRUCTION
    1544/    FEB7 :                     
    1545/    FEB7 :                     ;*************NULLS - SET NEW LINE AND CHAR PADDING
    1546/    FEB7 : 8D A7               CNULLS BSR    CDNUM    ; OBTAIN NEW LINE PAD
    1547/    FEB9 : DD F2                      STD    VECTAB+_PAD ; RESET VALUES
    1548/    FEBB : 39                         RTS             ; END COMMAND
    1549/    FEBC :                     
    1550/    FEBC :                     ;******************STLEVEL - SET STACK TRACE LEVEL
    1551/    FEBC : 27 05               CSTLEV BEQ    STLDFT   ; TAKE DEFAULT
    1552/    FEBE : 8D A0                      BSR    CDNUM    ; OBTAIN NEW STACK LEVEL
    1553/    FEC0 : DD F8                      STD    SLEVEL   ; STORE NEW ENTRY
    1554/    FEC2 : 39                         RTS             ; TO COMMAND HANDLER
    1555/    FEC3 : 30 6E               STLDFT LEAX   14,S     ; COMPUTE NMI COMPARE
    1556/    FEC5 : 9F F8                      STX    SLEVEL   ; AND STORE IT
    1557/    FEC7 : 39                         RTS             ; END COMMAND
    1558/    FEC8 :                     
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 27 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1559/    FEC8 :                     ;******************OFFSET - COMPUTE SHORT AND LONG
    1560/    FEC8 :                     ;******************                  BRANCH OFFSETS
    1561/    FEC8 : 8D 96               COFFS  BSR    CDNUM    ; OBTAIN INSTRUCTION ADDRESS
    1562/    FECA : 1F 01                      TFR    D,X      ; USE AS FROM ADDRESS
    1563/    FECC : 8D 92                      BSR    CDNUM    ; OBTAIN TO ADDRESS
    1564/    FECE :                     ;* D=TO INSTRUCTION, X=FROM INSTRUCTION OFFSET BYTE(S)
    1565/    FECE : 30 01                      LEAX   1,X      ; ADJUST FOR *+2 SHORT BRANCH
    1566/    FED0 : 34 30                      PSHS   Y,X      ; STORE WORD WORD AND VALUE ON S
    1567/    FED2 : A3 E4                      SUBD   ,S       ; FIND OFFSET
    1568/    FED4 : ED E4                      STD    ,S       ; SAVE OVER STACK
    1569/    FED6 : 30 61                      LEAX   1,S      ; POINT FOR ONE BYTE DISPLAY
    1570/    FED8 : 1D                         SEX             ; SIGN EXTENDED LOW BYTE
    1571/    FED9 : A1 E4                      CMPA   ,S       ; ? VALID FOR ONE BYTE OFFSET
    1572/    FEDB : 26 02                      BNE    COFNO1   ; BRANCH IF NOT
    1573/    FEDD : 3F                         SWI             ; SHOW ONE BYTE OFFSET
    1574/    FEDE : 04                         FCB    OUT2HS   ; FUNCTION
    1575/    FEDF : EE E4               COFNO1 LDU    ,S       ; RELOAD OFFSET
    1576/    FEE1 : 33 5F                      LEAU   -1,U     ; CONVERT TO LONG BRANCH OFFSET
    1577/    FEE3 : EF 84                      STU    ,X       ; STORE BACK WHERE X POINTS NOW
    1578/    FEE5 : 3F                         SWI             ; SHOW TWO BYTE OFFSET
    1579/    FEE6 : 05                         FCB    OUT4HS   ; FUNCTION
    1580/    FEE7 : 3F                         SWI             ; FORCE NEW LINE
    1581/    FEE8 : 06                         FCB    PCRLF    ; FUNCTION
    1582/    FEE9 : 35 96                      PULS   PC,X,D   ; RESTORE STACK AND END COMMAND
    1583/    FEEB :                     ;*H
    1584/    FEEB :                     
    1585/    FEEB :                     ;*************BREAKPOINT - DISPLAY/ENTER/DELETE/CLEAR
    1586/    FEEB :                     ;*************             BREAKPOINTS
    1587/    FEEB : 27 23               CBKPT  BEQ    CBKDSP   ; BRANCH DISPLAY OF JUST 'B'
    1588/    FEED : 17 FD F1                   LBSR   BLDNUM   ; ATTEMPT VALUE ENTRY
    1589/    FEF0 : 27 2C                      BEQ    CBKADD   ; BRANCH TO ADD IF SO
    1590/    FEF2 : 81 2D                      CMPA   #'-'     ; ? CORRECT DELIMITER
    1591/    FEF4 : 26 3F                      BNE    CBKERR   ; NO, BRANCH FOR ERROR
    1592/    FEF6 : 17 FD E8                   LBSR   BLDNUM   ; ATTEMPT DELETE VALUE
    1593/    FEF9 : 27 03                      BEQ    CBKDLE   ; GOT ONE, GO DELETE IT
    1594/    FEFB : 0F FA                      CLR    BKPTCT   ; WAS 'B -', SO ZERO COUNT
    1595/    FEFD : 39                  CBKRTS RTS             ; END COMMAND
    1596/    FEFE :                     ;* DELETE ENTRY
    1597/    FEFE : 8D 40               CBKDLE BSR    CBKSET   ; SETUP REGISTERS AND VALUE
    1598/    FF00 : 5A                  CBKDLP DECB            ; ? ANY ENTRIES IN TABLE
    1599/    FF01 : 2B 32                      BMI    CBKERR   ; BRANCH NO, ERROR
    1600/    FF03 : AC A1                      CMPX   ,Y++     ; ? IS THIS THE ENTRY
    1601/    FF05 : 26 F9                      BNE    CBKDLP   ; NO, TRY NEXT
    1602/    FF07 :                     ;* FOUND, NOW MOVE OTHERS UP IN ITS PLACE
    1603/    FF07 : AE A1               CBKDLM LDX    ,Y++     ; LOAD NEXT ONE UP
    1604/    FF09 : AF 3C                      STX    -4,Y     ; MOVE DOWN BY ONE
    1605/    FF0B : 5A                         DECB            ; ? DONE
    1606/    FF0C : 2A F9                      BPL    CBKDLM   ; NO, CONTINUE MOVE
    1607/    FF0E : 0A FA                      DEC    BKPTCT   ; DECREMENT BREAKPOINT COUNT
    1608/    FF10 : 8D 2E               CBKDSP BSR    CBKSET   ; SETUP REGISTERS AND LOAD VALUE
    1609/    FF12 : 27 E9                      BEQ    CBKRTS   ; RETURN IF NONE TO DISPLAY
    1610/    FF14 : 30 A1               CBKDSL LEAX   ,Y++     ; POINT TO NEXT ENTRY
    1611/    FF16 : 3F                         SWI             ; DISPLAY IN HEX
    1612/    FF17 : 05                         FCB    OUT4HS   ; FUNCTION
    1613/    FF18 : 5A                         DECB            ; COUNT DOWN
    1614/    FF19 : 26 F9                      BNE    CBKDSL   ; LOOP IF MORE TO DO
    1615/    FF1B : 3F                         SWI             ; SKIP TO NEW LINE
    1616/    FF1C : 06                         FCB    PCRLF    ; FUNCTION
    1617/    FF1D : 39                         RTS             ; RETURN TO END COMMAND
    1618/    FF1E :                     ;* ADD NEW ENTRY
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 28 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1619/    FF1E : 8D 20               CBKADD BSR    CBKSET   ; SETUP REGISTERS
    1620/    FF20 : C1 08                      CMPB   #NUMBKP  ; ? ALREADY FULL
    1621/    FF22 : 27 11                      BEQ    CBKERR   ; BRANCH ERROR IF SO
    1622/    FF24 : A6 84                      LDA    ,X       ; LOAD BYTE TO TRAP
    1623/    FF26 : E7 84                      STB    ,X       ; TRY TO CHANGE
    1624/    FF28 : E1 84                      CMPB   ,X       ; ? CHANGEABLE RAM
    1625/    FF2A : 26 09                      BNE    CBKERR   ; BRANCH ERROR IF NOT
    1626/    FF2C : A7 84                      STA    ,X       ; RESTORE BYTE
    1627/    FF2E : 5A                  CBKADL DECB            ; COUNT DOWN
    1628/    FF2F : 2B 07                      BMI    CBKADT   ; BRANCH IF DONE TO ADD IT
    1629/    FF31 : AC A1                      CMPX   ,Y++     ; ? ENTRY ALREADY HERE
    1630/    FF33 : 26 F9                      BNE    CBKADL   ; LOOP IF NOT
    1631/    FF35 : 16 FA 24            CBKERR LBRA   CMDBAD   ; RETURN TO ERROR PRODUCE
    1632/    FF38 : AF A4               CBKADT STX    ,Y       ; ADD THIS ENTRY
    1633/    FF3A : 6F 31                      CLR    -NUMBKP*2+1,Y ; CLEAR OPTIONAL BYTE
    1634/    FF3C : 0C FA                      INC    BKPTCT   ; ADD ONE TO COUNT
    1635/    FF3E : 20 D0                      BRA    CBKDSP   ; AND NOW DISPLAY ALL OF 'EM
    1636/    FF40 :                     ;* SETUP REGISTERS FOR SCAN
    1637/    FF40 : 9E 9B               CBKSET LDX     NUMBER  ; LOAD VALUE DESIRED
    1638/    FF42 : 31 8D E0 6C         CBKLDR LEAY    BKPTBL,PCR ; LOAD START OF TABLE
    1639/    FF46 : D6 FA                      LDB     BKPTCT  ; LOAD ENTRY COUNT
    1640/    FF48 : 39                         RTS             ; RETURN
    1641/    FF49 :                     
    1642/    FF49 :                     ;*****************ENCODE - ENCODE A POSTBYTE
    1643/    FF49 : 6F E2               CENCDE CLR    ,-S      ; DEFAULT TO NOT INDIRECT
    1644/    FF4B : 5F                         CLRB            ; ZERO POSTBYTE VALUE
    1645/    FF4C : 30 8C 3F                   LEAX   <CONV1,PCR ; START TABLE SEARCH
    1646/    FF4F : 3F                         SWI             ; OBTAIN FIRST CHARACTER
    1647/    FF50 : 00                         FCB    INCHNP   ; FUNCTION
    1648/    FF51 : 81 5B                      CMPA   #'['     ; ? INDIRECT HERE
    1649/    FF53 : 26 06                      BNE    CEN2     ; BRANCH IF NOT
    1650/    FF55 : 86 10                      LDA    #$10     ; SET INDIRECT BUT ON
    1651/    FF57 : A7 E4                      STA    ,S       ; SAVE FOR LATER
    1652/    FF59 : 3F                  CENGET SWI             ; OBTAIN NEXT CHARACTER
    1653/    FF5A : 00                         FCB    INCHNP   ; FUNCTION
    1654/    FF5B : 81 0D               CEN2   CMPA   #CR      ; ? END ENTRY
    1655/    FF5D : 27 0C                      BEQ    CEND1    ; BRANCH YES
    1656/    FF5F : 6D 84               CENLP1 TST    ,X       ; ? END OF TABLE
    1657/    FF61 : 2B D2                      BMI    CBKERR   ; BRANCH ERROR IF SO
    1658/    FF63 : A1 81                      CMPA   ,X++     ; ? THIS THE CHARACTER
    1659/    FF65 : 26 F8                      BNE    CENLP1   ; BRANCH IF NOT
    1660/    FF67 : EB 1F                      ADDB   -1,X     ; ADD THIS VALUE
    1661/    FF69 : 20 EE                      BRA    CENGET   ; GET NEXT INPUT
    1662/    FF6B : 30 8C 49            CEND1  LEAX   <CONV2,PCR ; POINT AT TABLE 2
    1663/    FF6E : 1F 98                      TFR    B,A      ; SAVE COPY IN A
    1664/    FF70 : 84 60                      ANDA   #$60     ; ISOLATE REGISTER MASK
    1665/    FF72 : AA E4                      ORA    ,S       ; ADD IN INDIRECTION BIT
    1666/    FF74 : A7 E4                      STA    ,S       ; SAVE BACK AS POSTBYTE SKELETON
    1667/    FF76 : C4 9F                      ANDB   #$9F     ; CLEAR REGISTER BITS
    1668/    FF78 : 6D 84               CENLP2 TST    ,X       ; ? END OF TABLE
    1669/    FF7A : 27 B9                      BEQ    CBKERR   ; BRANCH ERROR IF SO
    1670/    FF7C : E1 81                      CMPB   ,X++     ; ? SAME VALUE
    1671/    FF7E : 26 F8                      BNE    CENLP2   ; LOOP IF NOT
    1672/    FF80 : E6 1F                      LDB    -1,X     ; LOAD RESULT VALUE
    1673/    FF82 : EA E4                      ORB    ,S       ; ADD TO BASE SKELETON
    1674/    FF84 : E7 E4                      STB    ,S       ; SAVE POSTBYTE ON STACK
    1675/    FF86 : 30 E4                      LEAX   ,S       ; POINT TO IT
    1676/    FF88 : 3F                         SWI             ; SEND OUT AS HEX
    1677/    FF89 : 04                         FCB    OUT2HS   ; FUNCTION
    1678/    FF8A : 3F                         SWI             ; TO NEW LINE
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 29 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


    1679/    FF8B : 06                         FCB    PCRLF    ; FUNCTION
    1680/    FF8C : 35 84                      PULS   B,PC     ; END OF COMMAND
    1681/    FF8E :                     
    1682/    FF8E :                     ;* TABLE ONE DEFINES VALID INPUT IN SEQUENCE
    1683/    FF8E : 41 04 42 05 44 06   CONV1  FCB    'A',$04,'B',$05,'D',$06,'H',$01
             FF94 : 48 01             
    1684/    FF96 : 48 01 48 01 48 00          FCB    'H',$01,'H',$01,'H',$00,',',$00
             FF9C : 2C 00             
    1685/    FF9E : 2D 09 2D 01 53 70          FCB    '-',$09,'-',$01,'S',$70,'Y',$30
             FFA4 : 59 30             
    1686/    FFA6 : 55 50 58 10 2B 07          FCB    'U',$50,'X',$10,'+',$07,'+',$01
             FFAC : 2B 01             
    1687/    FFAE : 50 80 43 00 52 00          FCB    'P',$80,'C',$00,'R',$00,']',$00
             FFB4 : 5D 00             
    1688/    FFB6 : FF                         FCB    $FF      ; END OF TABLE
    1689/    FFB7 :                     ;*CONV2 USES ABOVE CONVERSION TO SET POSTBYTE
    1690/    FFB7 :                     ;*                             BIT SKELETON.
    1691/    FFB7 : 10 84 11 00         CONV2  FDB    $1084,$1100 ; R         H,R
    1692/    FFBB : 12 88 13 89                FDB    $1288,$1389 ; HH,R      HHHH,R
    1693/    FFBF : 14 86 15 85                FDB    $1486,$1585 ; A,R       B,R
    1694/    FFC3 : 16 8B 17 80                FDB    $168B,$1780 ; D,R       ,R+
    1695/    FFC7 : 18 81 19 82                FDB    $1881,$1982 ; ,R++      ,-R
    1696/    FFCB : 1A 83 82 8C                FDB    $1A83,$828C ; ,--R      HH,PCR
    1697/    FFCF : 83 8D 03 9F                FDB    $838D,$039F ; HHHH,PCR  [HHHH]
    1698/    FFD3 : 00                         FCB    0        ; END OF TABLE
    1699/    FFD4 :                     
    1700/    FFD4 :                     ;****************************************************
    1701/    FFD4 :                     ;*            DEFAULT INTERRUPT TRANSFERS           *
    1702/    FFD4 :                     ;****************************************************
    1703/    FFD4 : 6E 9D DF EE         RSRVD  JMP    [VECTAB+_RSVD,PCR] ; RESERVED VECTOR
    1704/    FFD8 : 6E 9D DF EC         SWI3   JMP    [VECTAB+_SWI3,PCR] ; SWI3 VECTOR
    1705/    FFDC : 6E 9D DF EA         SWI2   JMP    [VECTAB+_SWI2,PCR] ; SWI2 VECTOR
    1706/    FFE0 : 6E 9D DF E8         FIRQ   JMP    [VECTAB+_FIRQ,PCR] ; FIRQ VECTOR
    1707/    FFE4 : 6E 9D DF E6         IRQ    JMP    [VECTAB+_IRQ,PCR] ; IRQ VECTOR
    1708/    FFE8 : 6E 9D DF E4         SWI    JMP    [VECTAB+_SWI,PCR] ; SWI VECTOR
    1709/    FFEC : 6E 9D DF E2         NMI    JMP    [VECTAB+_NMI,PCR] ; NMI VECTOR
    1710/    FFF0 :                     
    1711/    FFF0 :                     ;******************************************************
    1712/    FFF0 :                     ;*             ASSIST09 HARDWARE VECTOR TABLE
    1713/    FFF0 :                     ;*  THIS TABLE IS USED IF THE ASSIST09 ROM ADDRESSES
    1714/    FFF0 :                     ;*  THE MC6809 HARDWARE VECTORS.
    1715/    FFF0 :                     ;******************************************************
    1716/    FFF0 :                            ORG    ROMBEG+ROMSIZ-16 ; SETUP HARDWARE VECTORS
    1717/    FFF0 : FF D4                      FDB    RSRVD    ; RESERVED SLOT
    1718/    FFF2 : FF D8                      FDB    SWI3     ; SOFTWARE INTERRUPT 3
    1719/    FFF4 : FF DC                      FDB    SWI2     ; SOFTWARE INTERRUPT 2
    1720/    FFF6 : FF E0                      FDB    FIRQ     ; FAST INTERRUPT REQUEST
    1721/    FFF8 : FF E4                      FDB    IRQ      ; INTERRUPT REQUEST
    1722/    FFFA : FF E8                      FDB    SWI      ; SOFTWARE INTERRUPT
    1723/    FFFC : FF EC                      FDB    NMI      ; NON-MASKABLE INTERRUPT
    1724/    FFFE : F8 37                      FDB    RESET    ; RESTART
    1725/   10000 :                     
    1726/   10000 :                            END    RESET
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 30 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


  Symbol Table (* = unused):
  --------------------------

 ACIA :                        E008 - |  ADDR :                        DF9E - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARMBK2 :                      FDA7 C |  ARMBLP :                      FD8E C |
 ARMLOP :                      FDAC C |  ARMNSW :                      FD9D C |
 BASEPG :                      DF9D - |  BELL :                           7 - |
 BKPTBL :                      DFB2 - |  BKPTCT :                      DFFA - |
*BKPTOP :                      DFA2 - |  BLD2 :                        F815 C |
 BLD3 :                        F821 C |  BLDBAD :                      FD46 C |
 BLDHEX :                      FD4D C |  BLDHXC :                      FD4F C |
 BLDHXI :                      FD49 C |  BLDNNB :                      FCDF C |
 BLDNUM :                      FCE1 C |  BLDRTN :                      F835 C |
 BLDSHF :                      FD58 C |  BLDVTR :                      F800 C |
 BRKPT :                          A - |  BSDAT :                       FB38 C |
 BSDCMP :                      FB6A C |  BSDEOL :                      FB70 C |
 BSDLD1 :                      FB40 C |  BSDLD2 :                      FB42 C |
 BSDNXT :                      FB60 C |  BSDPUN :                      FB92 C |
 BSDSRT :                      FB6E C |  BSOFF :                       FB27 C |
 BSOFLP :                      FB33 C |  BSON :                        FB1B C |
 BSON2 :                       FB22 C |  BSPEOF :                      FBEF C |
 BSPGO :                       FBA3 C |  BSPMRE :                      FBC6 C |
 BSPOK :                       FBAF C |  BSPSTR :                      FBEC C |
 BSPUN2 :                      FBE7 C |  BSPUNC :                      FBE9 C |
 BYTE :                        FB75 C |  BYTHEX :                      FB89 C |
 BYTRTS :                      FB88 C |  CAN :                           18 - |
*CASESENSITIVE :                  0 - |  CBKADD :                      FF1E C |
 CBKADL :                      FF2E C |  CBKADT :                      FF38 C |
 CBKDLE :                      FEFE C |  CBKDLM :                      FF07 C |
 CBKDLP :                      FF00 C |  CBKDSL :                      FF14 C |
 CBKDSP :                      FF10 C |  CBKERR :                      FF35 C |
 CBKLDR :                      FF42 C |  CBKPT :                       FEEB C |
 CBKRTS :                      FEFD C |  CBKSET :                      FF40 C |
 CCALBS :                      FE7B C |  CCALL :                       FDB9 C |
 CDBADN :                      FE6E C |  CDCNT :                       FE5A C |
 CDISP :                       FE43 C |  CDISPS :                      FE51 C |
 CDNUM :                       FE60 C |  CDOT :                        FEA8 C |
 CEN2 :                        FF5B C |  CENCDE :                      FF49 C |
 CEND1 :                       FF6B C |  CENGET :                      FF59 C |
 CENLP1 :                      FF5F C |  CENLP2 :                      FF78 C |
 CGO :                         FD80 C |  CGOBRK :                      FDBF C |
 CHKABT :                      FA58 C |  CHKRTN :                      FA61 C |
 CHKSEC :                      FA60 C |  CHKWT :                       FA62 C |
 CIDAT :                       FADC C |  CIOFF :                       FAF0 - |
 CION :                        FAE6 - |  CIRTN :                       FAE5 C |
 CLOAD :                       FE8F C |  CLVDFT :                      FE9B C |
 CLVOFS :                      FE92 C |  CMD :                         F8F7 C |
 CMD2 :                        F935 C |  CMD3 :                        F948 C |
 CMDBAD :                      F95C C |  CMDCMP :                      F977 C |
 CMDDDL :                      F901 C |  CMDFLS :                      F96C C |
 CMDGOT :                      F94D C |  CMDMEM :                      F990 C |
 CMDNEP :                      F8F9 C |  CMDNOL :                      F90A C |
 CMDSCH :                      F953 C |  CMDSIZ :                      F96F C |
 CMDSME :                      F967 C |  CMDTB2 :                      F99B C |
 CMDTBL :                      F99C - |  CMDXQT :                      F987 C |
 CMEM :                        FDC3 C |  CMEM2 :                       FDC8 C |
 CMEM4 :                       FDD1 C |  CMEMN :                       FDC6 C |
 CMENUM :                      FDE0 C |  CMESTR :                      FDEC C |
 CMNOTB :                      FE02 C |  CMNOTC :                      FDE8 C |
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 31 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


 CMNOTL :                      FE0E C |  CMNOTQ :                      FDF8 C |
 CMNOTU :                      FE1C C |  CMPADP :                      FE18 C |
 CMPADS :                      FE16 C |  CMSPCE :                      FDFE C |
 CNULLS :                      FEB7 C |  CNVGOT :                      FD74 C |
 CNVHEX :                      FD62 C |  CNVOK :                       FD76 C |
 CNVRTS :                      FD78 C |  CODAT :                       FAF1 C |
 CODTAD :                      FB0F C |  CODTAO :                      FB12 C |
 CODTLP :                      FB07 C |  CODTPD :                      FB03 C |
 CODTRT :                      FB0D C |  COFFS :                       FEC8 C |
 COFNO1 :                      FEDF C | *CONSTPI :        3.141592653589793 - |
 CONV1 :                       FF8E C |  CONV2 :                       FFB7 C |
 COOFF :                       FAF0 - |  COON :                        FAE6 C |
 CPUNCH :                      FE71 C |  CR :                             D - |
 CREG :                        FC4A C |  CSTLEV :                      FEBC C |
 CTRACE :                      FEA4 C |  CTRCE3 :                      FEAA C |
 CVER :                        FEA1 C |  CWINDO :                      FE3E C |
*DATE :                "04/04/2023" - |  DELIM :                       DF8E - |
 DFTCHP :                         0 - |  DFTNLP :                         5 - |
 DLE :                           10 - |  EOT :                            4 - |
 ERRMSG :                      FABD C |  ERROR :                       FACE C |
 EXP1 :                        FCE9 C |  EXP2 :                        FD07 C |
 EXPADD :                      FD23 C |  EXPCDL :                      FD17 C |
 EXPCHM :                      FD2B C |  EXPDLM :                      FCEB C |
 EXPRTN :                      FD05 C |  EXPSUB :                      FD36 C |
 EXPTDI :                      FD0D C |  EXPTDL :                      FD0F C |
 EXPTRM :                      FD42 C | *FALSE :                          0 - |
 FIRQ :                        FFE0 C |  FIRQR :                       FABC - |
 GOADDR :                      FD83 C |  GONDFT :                      FDA2 C |
*HAS64 :                          1 - |  HIVTR :                         34 - |
 HSBLNK :                      FC00 C |  HSDRTN :                      FC47 C |
 HSDTA :                       FBFC C |  HSHCHR :                      FC2B C |
 HSHCOK :                      FC35 C |  HSHDOT :                      FC33 C |
 HSHLNE :                      FC14 C |  HSHNXT :                      FC20 C |
 HSHTTL :                      FC06 C |  INCHNP :                         0 - |
 INITVT :                      F844 C |  INTVE :                       F87D - |
 INTVS :                       F870 C |  IRQ :                         FFE4 C |
 IRQR :                        FAD8 - |  LASTOP :                      DF99 - |
 LDDP :                        FAC1 C |  LF :                             A - |
*LISTON :                         1 - | *MACEXP :                         7 - |
 MISFLG :                      DF8F - | *MOMCPU :                      6809 - |
*MOMCPUNAME :                "6809" - |  MONITR :                         8 - |
 MSHOWP :                      FA79 C |  MUPBAD :                      FE36 C |
 MUPDAT :                      FE2B C | *NESTMAX :                      100 - |
 NMI :                         FFEC C |  NMICON :                      FAB7 C |
 NMIR :                        FA7D C |  NMITRC :                      FAB0 C |
 NUMBER :                      DF9B - |  NUMBKP :                         8 - |
 NUMFUN :                         B - |  NUMVTR :                        1B - |
 OUT2HS :                         4 - |  OUT4HS :                         5 - |
 OUTCH :                          1 - | *PADDING :                        0 - |
*PAUSE :                          B - |  PAUSER :                      DFFC - |
 PCNTER :                      DF93 - |  PCRLF :                          6 - |
 PDATA :                          3 - |  PDATA1 :                         2 - |
 PROMPT :                       '>' - |  PRTADR :                      FE21 C |
 PSTACK :                      DF95 - |  PTM :                         E000 - |
 PTMC13 :                      E000 - |  PTMC2 :                       E001 - |
*PTMSTA :                      E001 - |  PTMTM1 :                      E002 - |
*PTMTM2 :                      E004 - | *PTMTM3 :                      E006 - |
 RAMOFS :          FFFFFFFFFFFFE700 - |  READ :                        FD79 C |
 REG4 :                        FC94 C |  REGAGN :                      FCC3 C |
 REGCHG :                      FC70 C |  REGCNG :                      FC9D C |
 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 32 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


 REGMSK :                      FC50 C |  REGNXC :                      FCB1 C |
 REGP1 :                       FC78 C |  REGP2 :                       FC81 C |
 REGP3 :                       FC92 C |  REGPRS :                      FAB3 C |
 REGPRT :                      FC6F C |  REGRTN :                      FC9B C |
 REGSKP :                      FCAA C |  REGTF1 :                      FCC9 C |
 REGTF2 :                      FCD6 C |  REGTWO :                      FCBB C |
*RELAXED :                        0 - |  RESET :                       F837 C |
 RESET2 :                      F83D C |  ROM2OF :                      F000 - |
*ROM2WK :                      DF66 - |  ROMBEG :                      F800 - |
 ROMSIZ :                       800 - |  RSRVD :                       FFD4 C |
 RSRVDR :                      FAD8 C |  RSTACK :                      DF97 - |
 RTI :                         FABC C |  RTS :                         FAF0 C |
 SEND :                        F9EC C |  SIGNON :                      F8C9 C |
 SKIP2 :                         8C - |  SLEVEL :                      DFF8 - |
 SPACE :                          7 - |  STACK :                       DF51 - |
 STLDFT :                      FEC3 C |  SWI :                         FFE8 C |
 SWI2 :                        FFDC C |  SWI2R :                       FAD8 - |
 SWI3 :                        FFD8 C |  SWI3R :                       FAD8 - |
 SWIBFL :                      DFFB - |  SWICNT :                      DF90 - |
 SWIDNE :                      F8B5 C |  SWILP :                       F8A8 C |
 SWIR :                        F895 C |  SWIVTB :                      F87D C |
*TIME :               "04:30:29 PM" - |  TRACEC :                      DF91 - |
*TRUE :                           1 - |  TSTACK :                      DF51 - |
*VCTRSW :                         9 - |  VECTAB :                      DFC2 - |
*VERSION :                     142F - |  WINDOW :                      DFA0 - |
 WORKPG :                      DF00 - |  XQCIDT :                      FA72 C |
 XQPAUS :                      FA6E C |  ZBKCMD :                      FAD5 C |
 ZBKPNT :                      FAD3 C |  ZIN2 :                        FA2A C |
 ZINCH :                       FA11 C |  ZINCHP :                      FA0F C |
 ZMONT2 :                      F8E6 C |  ZMONTR :                      F8D2 C |
 ZOT2HS :                      F9F2 C |  ZOT4HS :                      F9F0 C |
 ZOTCH1 :                      FA2E C |  ZOTCH2 :                      FA37 C |
 ZOTCH3 :                      FA39 C |  ZOUT2H :                      F9D9 C |
 ZOUTHX :                      F9E6 C |  ZPAUSE :                      FA4E C |
 ZPCRLF :                      FA3D C |  ZPCRLS :                      FA3C C |
 ZPDAT1 :                      FA48 C |  ZPDATA :                      FA40 C |
 ZPDTLP :                      FA46 C |  ZSPACE :                      F9F6 C |
 ZVSWTH :                      F9FA C |  _ACIA :                         2E - |
 _AVTBL :                         0 - |  _BSDAT :                        24 - |
 _BSOFF :                        26 - |  _BSON :                         22 - |
 _CIDTA :                        16 - | *_CIOFF :                        18 - |
 _CION :                         14 - |  _CMDL1 :                         2 - |
 _CMDL2 :                        2C - |  _CODTA :                        1C - |
*_COOFF :                        1E - |  _COON :                         1A - |
 _ECHO :                         32 - |  _EXPAN :                        2A - |
 _FIRQ :                          A - |  _HSDTA :                        20 - |
 _IRQ :                           C - |  _NMI :                          10 - |
 _PAD :                          30 - |  _PAUSE :                        28 - |
 _PTM :                          34 - | *_RESET :                        12 - |
 _RSVD :                          4 - |  _SWI :                           E - |
 _SWI2 :                          8 - |  _SWI3 :                          6 - |

    335 symbols
     26 unused symbols

 AS V1.42 Beta [Bld 239] - Source File ASSIST09.ASM - Page 33 - 04/04/2023 04:30:29 PM
ASSIST09 - MC6809 MONITOR


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   1727 lines source file
      3 passes
      0 errors
      0 warnings
